// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_det,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.184000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2099,HLS_SYN_LUT=1966}" *)

module max_det (
        ap_clk,
        ap_rst_n,
        vsum_1_V_TDATA,
        vsum_1_V_TVALID,
        vsum_1_V_TREADY,
        vlr_1_V_TDATA,
        vlr_1_V_TVALID,
        vlr_1_V_TREADY,
        vbt_1_V_TDATA,
        vbt_1_V_TVALID,
        vbt_1_V_TREADY,
        out_peaks_V_TDATA,
        out_peaks_V_TVALID,
        out_peaks_V_TREADY,
        vsum_2_V_TDATA,
        vsum_2_V_TVALID,
        vsum_2_V_TREADY,
        vlr_2_V_TDATA,
        vlr_2_V_TVALID,
        vlr_2_V_TREADY,
        vbt_2_V_TDATA,
        vbt_2_V_TVALID,
        vbt_2_V_TREADY,
        vsum_3_V_TDATA,
        vsum_3_V_TVALID,
        vsum_3_V_TREADY,
        vlr_3_V_TDATA,
        vlr_3_V_TVALID,
        vlr_3_V_TREADY,
        vbt_3_V_TDATA,
        vbt_3_V_TVALID,
        vbt_3_V_TREADY,
        vsum_4_V_TDATA,
        vsum_4_V_TVALID,
        vsum_4_V_TREADY,
        vlr_4_V_TDATA,
        vlr_4_V_TVALID,
        vlr_4_V_TREADY,
        vbt_4_V_TDATA,
        vbt_4_V_TVALID,
        vbt_4_V_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] vsum_1_V_TDATA;
input   vsum_1_V_TVALID;
output   vsum_1_V_TREADY;
input  [31:0] vlr_1_V_TDATA;
input   vlr_1_V_TVALID;
output   vlr_1_V_TREADY;
input  [31:0] vbt_1_V_TDATA;
input   vbt_1_V_TVALID;
output   vbt_1_V_TREADY;
output  [31:0] out_peaks_V_TDATA;
output   out_peaks_V_TVALID;
input   out_peaks_V_TREADY;
input  [31:0] vsum_2_V_TDATA;
input   vsum_2_V_TVALID;
output   vsum_2_V_TREADY;
input  [31:0] vlr_2_V_TDATA;
input   vlr_2_V_TVALID;
output   vlr_2_V_TREADY;
input  [31:0] vbt_2_V_TDATA;
input   vbt_2_V_TVALID;
output   vbt_2_V_TREADY;
input  [31:0] vsum_3_V_TDATA;
input   vsum_3_V_TVALID;
output   vsum_3_V_TREADY;
input  [31:0] vlr_3_V_TDATA;
input   vlr_3_V_TVALID;
output   vlr_3_V_TREADY;
input  [31:0] vbt_3_V_TDATA;
input   vbt_3_V_TVALID;
output   vbt_3_V_TREADY;
input  [31:0] vsum_4_V_TDATA;
input   vsum_4_V_TVALID;
output   vsum_4_V_TREADY;
input  [31:0] vlr_4_V_TDATA;
input   vlr_4_V_TVALID;
output   vlr_4_V_TREADY;
input  [31:0] vbt_4_V_TDATA;
input   vbt_4_V_TVALID;
output   vbt_4_V_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] vsum_1_V_0_data_out;
wire    vsum_1_V_0_vld_in;
wire    vsum_1_V_0_vld_out;
wire    vsum_1_V_0_ack_in;
reg    vsum_1_V_0_ack_out;
reg   [31:0] vsum_1_V_0_payload_A;
reg   [31:0] vsum_1_V_0_payload_B;
reg    vsum_1_V_0_sel_rd;
reg    vsum_1_V_0_sel_wr;
wire    vsum_1_V_0_sel;
wire    vsum_1_V_0_load_A;
wire    vsum_1_V_0_load_B;
reg   [1:0] vsum_1_V_0_state;
wire    vsum_1_V_0_state_cmp_full;
reg   [31:0] vlr_1_V_0_data_out;
wire    vlr_1_V_0_vld_in;
wire    vlr_1_V_0_vld_out;
wire    vlr_1_V_0_ack_in;
reg    vlr_1_V_0_ack_out;
reg   [31:0] vlr_1_V_0_payload_A;
reg   [31:0] vlr_1_V_0_payload_B;
reg    vlr_1_V_0_sel_rd;
reg    vlr_1_V_0_sel_wr;
wire    vlr_1_V_0_sel;
wire    vlr_1_V_0_load_A;
wire    vlr_1_V_0_load_B;
reg   [1:0] vlr_1_V_0_state;
wire    vlr_1_V_0_state_cmp_full;
reg   [31:0] vbt_1_V_0_data_out;
wire    vbt_1_V_0_vld_in;
wire    vbt_1_V_0_vld_out;
wire    vbt_1_V_0_ack_in;
reg    vbt_1_V_0_ack_out;
reg   [31:0] vbt_1_V_0_payload_A;
reg   [31:0] vbt_1_V_0_payload_B;
reg    vbt_1_V_0_sel_rd;
reg    vbt_1_V_0_sel_wr;
wire    vbt_1_V_0_sel;
wire    vbt_1_V_0_load_A;
wire    vbt_1_V_0_load_B;
reg   [1:0] vbt_1_V_0_state;
wire    vbt_1_V_0_state_cmp_full;
reg   [31:0] out_peaks_V_1_data_out;
reg    out_peaks_V_1_vld_in;
wire    out_peaks_V_1_vld_out;
wire    out_peaks_V_1_ack_in;
wire    out_peaks_V_1_ack_out;
reg   [31:0] out_peaks_V_1_payload_A;
reg   [31:0] out_peaks_V_1_payload_B;
reg    out_peaks_V_1_sel_rd;
reg    out_peaks_V_1_sel_wr;
wire    out_peaks_V_1_sel;
wire    out_peaks_V_1_load_A;
wire    out_peaks_V_1_load_B;
reg   [1:0] out_peaks_V_1_state;
wire    out_peaks_V_1_state_cmp_full;
reg   [31:0] vsum_2_V_0_data_out;
wire    vsum_2_V_0_vld_in;
wire    vsum_2_V_0_vld_out;
wire    vsum_2_V_0_ack_in;
reg    vsum_2_V_0_ack_out;
reg   [31:0] vsum_2_V_0_payload_A;
reg   [31:0] vsum_2_V_0_payload_B;
reg    vsum_2_V_0_sel_rd;
reg    vsum_2_V_0_sel_wr;
wire    vsum_2_V_0_sel;
wire    vsum_2_V_0_load_A;
wire    vsum_2_V_0_load_B;
reg   [1:0] vsum_2_V_0_state;
wire    vsum_2_V_0_state_cmp_full;
reg   [31:0] vlr_2_V_0_data_out;
wire    vlr_2_V_0_vld_in;
wire    vlr_2_V_0_vld_out;
wire    vlr_2_V_0_ack_in;
reg    vlr_2_V_0_ack_out;
reg   [31:0] vlr_2_V_0_payload_A;
reg   [31:0] vlr_2_V_0_payload_B;
reg    vlr_2_V_0_sel_rd;
reg    vlr_2_V_0_sel_wr;
wire    vlr_2_V_0_sel;
wire    vlr_2_V_0_load_A;
wire    vlr_2_V_0_load_B;
reg   [1:0] vlr_2_V_0_state;
wire    vlr_2_V_0_state_cmp_full;
reg   [31:0] vbt_2_V_0_data_out;
wire    vbt_2_V_0_vld_in;
wire    vbt_2_V_0_vld_out;
wire    vbt_2_V_0_ack_in;
reg    vbt_2_V_0_ack_out;
reg   [31:0] vbt_2_V_0_payload_A;
reg   [31:0] vbt_2_V_0_payload_B;
reg    vbt_2_V_0_sel_rd;
reg    vbt_2_V_0_sel_wr;
wire    vbt_2_V_0_sel;
wire    vbt_2_V_0_load_A;
wire    vbt_2_V_0_load_B;
reg   [1:0] vbt_2_V_0_state;
wire    vbt_2_V_0_state_cmp_full;
reg   [31:0] vsum_3_V_0_data_out;
wire    vsum_3_V_0_vld_in;
wire    vsum_3_V_0_vld_out;
wire    vsum_3_V_0_ack_in;
reg    vsum_3_V_0_ack_out;
reg   [31:0] vsum_3_V_0_payload_A;
reg   [31:0] vsum_3_V_0_payload_B;
reg    vsum_3_V_0_sel_rd;
reg    vsum_3_V_0_sel_wr;
wire    vsum_3_V_0_sel;
wire    vsum_3_V_0_load_A;
wire    vsum_3_V_0_load_B;
reg   [1:0] vsum_3_V_0_state;
wire    vsum_3_V_0_state_cmp_full;
reg   [31:0] vlr_3_V_0_data_out;
wire    vlr_3_V_0_vld_in;
wire    vlr_3_V_0_vld_out;
wire    vlr_3_V_0_ack_in;
reg    vlr_3_V_0_ack_out;
reg   [31:0] vlr_3_V_0_payload_A;
reg   [31:0] vlr_3_V_0_payload_B;
reg    vlr_3_V_0_sel_rd;
reg    vlr_3_V_0_sel_wr;
wire    vlr_3_V_0_sel;
wire    vlr_3_V_0_load_A;
wire    vlr_3_V_0_load_B;
reg   [1:0] vlr_3_V_0_state;
wire    vlr_3_V_0_state_cmp_full;
reg   [31:0] vbt_3_V_0_data_out;
wire    vbt_3_V_0_vld_in;
wire    vbt_3_V_0_vld_out;
wire    vbt_3_V_0_ack_in;
reg    vbt_3_V_0_ack_out;
reg   [31:0] vbt_3_V_0_payload_A;
reg   [31:0] vbt_3_V_0_payload_B;
reg    vbt_3_V_0_sel_rd;
reg    vbt_3_V_0_sel_wr;
wire    vbt_3_V_0_sel;
wire    vbt_3_V_0_load_A;
wire    vbt_3_V_0_load_B;
reg   [1:0] vbt_3_V_0_state;
wire    vbt_3_V_0_state_cmp_full;
reg   [31:0] vsum_4_V_0_data_out;
wire    vsum_4_V_0_vld_in;
wire    vsum_4_V_0_vld_out;
wire    vsum_4_V_0_ack_in;
reg    vsum_4_V_0_ack_out;
reg   [31:0] vsum_4_V_0_payload_A;
reg   [31:0] vsum_4_V_0_payload_B;
reg    vsum_4_V_0_sel_rd;
reg    vsum_4_V_0_sel_wr;
wire    vsum_4_V_0_sel;
wire    vsum_4_V_0_load_A;
wire    vsum_4_V_0_load_B;
reg   [1:0] vsum_4_V_0_state;
wire    vsum_4_V_0_state_cmp_full;
reg   [31:0] vlr_4_V_0_data_out;
wire    vlr_4_V_0_vld_in;
wire    vlr_4_V_0_vld_out;
wire    vlr_4_V_0_ack_in;
reg    vlr_4_V_0_ack_out;
reg   [31:0] vlr_4_V_0_payload_A;
reg   [31:0] vlr_4_V_0_payload_B;
reg    vlr_4_V_0_sel_rd;
reg    vlr_4_V_0_sel_wr;
wire    vlr_4_V_0_sel;
wire    vlr_4_V_0_load_A;
wire    vlr_4_V_0_load_B;
reg   [1:0] vlr_4_V_0_state;
wire    vlr_4_V_0_state_cmp_full;
reg   [31:0] vbt_4_V_0_data_out;
wire    vbt_4_V_0_vld_in;
wire    vbt_4_V_0_vld_out;
wire    vbt_4_V_0_ack_in;
reg    vbt_4_V_0_ack_out;
reg   [31:0] vbt_4_V_0_payload_A;
reg   [31:0] vbt_4_V_0_payload_B;
reg    vbt_4_V_0_sel_rd;
reg    vbt_4_V_0_sel_wr;
wire    vbt_4_V_0_sel;
wire    vbt_4_V_0_load_A;
wire    vbt_4_V_0_load_B;
reg   [1:0] vbt_4_V_0_state;
wire    vbt_4_V_0_state_cmp_full;
reg   [25:0] comp_vsum_1_V;
reg   [25:0] comp_11_V;
reg   [25:0] comp_21_V;
reg   [25:0] comp_31_V;
reg   [25:0] comp_vsum_2_V;
reg   [25:0] comp_12_V;
reg   [25:0] comp_22_V;
reg   [25:0] comp_32_V;
reg   [25:0] comp_vsum_3_V;
reg   [25:0] comp_13_V;
reg   [25:0] comp_23_V;
reg   [25:0] comp_33_V;
reg   [25:0] comp_vsum_4_V;
reg   [25:0] comp_14_V;
reg   [25:0] comp_24_V;
reg   [25:0] comp_34_V;
reg   [31:0] contador;
reg    vsum_1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    vlr_1_V_TDATA_blk_n;
reg    vbt_1_V_TDATA_blk_n;
reg    out_peaks_V_TDATA_blk_n;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    vsum_2_V_TDATA_blk_n;
reg    vlr_2_V_TDATA_blk_n;
reg    vbt_2_V_TDATA_blk_n;
reg    vsum_3_V_TDATA_blk_n;
reg    vlr_3_V_TDATA_blk_n;
reg    vbt_3_V_TDATA_blk_n;
reg    vsum_4_V_TDATA_blk_n;
reg    vlr_4_V_TDATA_blk_n;
reg    vbt_4_V_TDATA_blk_n;
wire   [25:0] vsum_i_1_V_2_fu_561_p1;
reg    ap_block_state2;
wire   [25:0] vlr_test_1_V_fu_565_p1;
wire   [25:0] vbt_test_1_V_fu_569_p1;
wire   [25:0] vsum_i_2_V_2_fu_573_p1;
wire   [25:0] vlr_test_2_V_fu_577_p1;
wire   [25:0] vbt_test_2_V_fu_581_p1;
wire   [25:0] vsum_i_3_V_2_fu_585_p1;
wire   [25:0] vlr_test_3_V_fu_589_p1;
wire   [25:0] vbt_test_3_V_fu_593_p1;
wire   [25:0] vsum_i_4_V_2_fu_597_p1;
wire   [25:0] vlr_test_4_V_fu_601_p1;
wire   [25:0] vbt_test_4_V_fu_605_p1;
wire   [25:0] vsum_test_1_V_1_fu_621_p3;
wire   [0:0] tmp_4_fu_633_p2;
wire   [25:0] vbt_test_1_V_comp_s_fu_669_p3;
reg   [25:0] vbt_test_1_V_comp_s_reg_1085;
wire   [25:0] vsum_i_2_V_2_Val2_s_fu_689_p3;
wire   [0:0] tmp_9_fu_701_p2;
wire   [25:0] vsum_i_2_V_1_comp_s_fu_719_p3;
reg   [25:0] vsum_i_2_V_1_comp_s_reg_1100;
wire   [25:0] vlr_test_2_V_comp_s_fu_727_p3;
reg   [25:0] vlr_test_2_V_comp_s_reg_1105;
wire   [25:0] vbt_test_2_V_comp_s_fu_735_p3;
reg   [25:0] vbt_test_2_V_comp_s_reg_1110;
wire   [25:0] vsum_i_3_V_2_Val2_s_fu_755_p3;
wire   [0:0] tmp_1_fu_767_p2;
wire   [25:0] vsum_i_3_V_1_comp_s_fu_785_p3;
reg   [25:0] vsum_i_3_V_1_comp_s_reg_1125;
wire   [25:0] vlr_test_3_V_comp_s_fu_793_p3;
reg   [25:0] vlr_test_3_V_comp_s_reg_1130;
wire   [25:0] vbt_test_3_V_comp_s_fu_801_p3;
reg   [25:0] vbt_test_3_V_comp_s_reg_1135;
wire   [25:0] vsum_i_4_V_2_Val2_s_fu_821_p3;
wire   [0:0] tmp_3_fu_833_p2;
wire   [25:0] vsum_i_4_V_1_comp_s_fu_851_p3;
reg   [25:0] vsum_i_4_V_1_comp_s_reg_1150;
wire   [25:0] vlr_test_4_V_comp_s_fu_859_p3;
reg   [25:0] vlr_test_4_V_comp_s_reg_1155;
wire   [25:0] vbt_test_4_V_comp_s_fu_867_p3;
reg   [25:0] vbt_test_4_V_comp_s_reg_1160;
wire   [31:0] tmp_6_fu_879_p2;
wire   [3:0] i_1_fu_897_p2;
reg   [3:0] i_1_reg_1176;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_fu_891_p2;
wire  signed [31:0] tmp_10_fu_908_p1;
reg   [3:0] peaks_V_address0;
reg    peaks_V_ce0;
reg    peaks_V_we0;
reg   [25:0] peaks_V_d0;
wire   [25:0] peaks_V_q0;
reg   [3:0] peaks_V_address1;
reg    peaks_V_ce1;
reg    peaks_V_we1;
reg   [25:0] peaks_V_d1;
reg   [3:0] i_reg_319;
wire    ap_CS_fsm_state7;
wire   [0:0] ap_phi_mux_comp_vsum_1_V_flag_1_phi_fu_334_p4;
reg   [0:0] comp_vsum_1_V_flag_1_reg_330;
wire   [0:0] tmp_7_fu_885_p2;
reg   [25:0] comp_vsum_1_V_new_1_reg_341;
reg   [25:0] comp_11_V_new_1_reg_352;
reg   [25:0] comp_21_V_new_1_reg_363;
reg   [25:0] comp_31_V_new_1_reg_374;
wire   [0:0] ap_phi_mux_comp_vsum_2_V_flag_1_phi_fu_389_p4;
reg   [0:0] comp_vsum_2_V_flag_1_reg_385;
reg   [25:0] comp_vsum_2_V_new_1_reg_396;
reg   [25:0] comp_12_V_new_1_reg_407;
reg   [25:0] comp_22_V_new_1_reg_418;
reg   [25:0] comp_32_V_new_1_reg_429;
wire   [0:0] ap_phi_mux_comp_vsum_3_V_flag_1_phi_fu_444_p4;
reg   [0:0] comp_vsum_3_V_flag_1_reg_440;
reg   [25:0] comp_vsum_3_V_new_1_reg_451;
reg   [25:0] comp_13_V_new_1_reg_462;
reg   [25:0] comp_23_V_new_1_reg_473;
reg   [25:0] comp_33_V_new_1_reg_484;
wire   [0:0] ap_phi_mux_comp_vsum_4_V_flag_1_phi_fu_499_p4;
reg   [0:0] comp_vsum_4_V_flag_1_reg_495;
reg   [25:0] comp_vsum_4_V_new_1_reg_506;
reg   [25:0] comp_14_V_new_1_reg_517;
reg   [25:0] comp_24_V_new_1_reg_528;
reg   [25:0] comp_34_V_new_1_reg_539;
reg   [31:0] contador_new_reg_550;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_8_fu_903_p1;
wire    ap_CS_fsm_state11;
wire   [25:0] vsum_i_1_V_1_comp_s_fu_651_p3;
wire   [25:0] vlr_test_1_V_comp_s_fu_660_p3;
wire   [0:0] tmp_fu_609_p2;
wire   [25:0] vsum_i_1_V_fu_615_p2;
wire   [0:0] tmp_5_fu_677_p2;
wire   [25:0] vsum_i_2_V_fu_683_p2;
wire   [0:0] tmp_s_fu_743_p2;
wire   [25:0] vsum_i_3_V_fu_749_p2;
wire   [0:0] tmp_2_fu_809_p2;
wire   [25:0] vsum_i_4_V_fu_815_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 vsum_1_V_0_sel_rd = 1'b0;
#0 vsum_1_V_0_sel_wr = 1'b0;
#0 vsum_1_V_0_state = 2'd0;
#0 vlr_1_V_0_sel_rd = 1'b0;
#0 vlr_1_V_0_sel_wr = 1'b0;
#0 vlr_1_V_0_state = 2'd0;
#0 vbt_1_V_0_sel_rd = 1'b0;
#0 vbt_1_V_0_sel_wr = 1'b0;
#0 vbt_1_V_0_state = 2'd0;
#0 out_peaks_V_1_sel_rd = 1'b0;
#0 out_peaks_V_1_sel_wr = 1'b0;
#0 out_peaks_V_1_state = 2'd0;
#0 vsum_2_V_0_sel_rd = 1'b0;
#0 vsum_2_V_0_sel_wr = 1'b0;
#0 vsum_2_V_0_state = 2'd0;
#0 vlr_2_V_0_sel_rd = 1'b0;
#0 vlr_2_V_0_sel_wr = 1'b0;
#0 vlr_2_V_0_state = 2'd0;
#0 vbt_2_V_0_sel_rd = 1'b0;
#0 vbt_2_V_0_sel_wr = 1'b0;
#0 vbt_2_V_0_state = 2'd0;
#0 vsum_3_V_0_sel_rd = 1'b0;
#0 vsum_3_V_0_sel_wr = 1'b0;
#0 vsum_3_V_0_state = 2'd0;
#0 vlr_3_V_0_sel_rd = 1'b0;
#0 vlr_3_V_0_sel_wr = 1'b0;
#0 vlr_3_V_0_state = 2'd0;
#0 vbt_3_V_0_sel_rd = 1'b0;
#0 vbt_3_V_0_sel_wr = 1'b0;
#0 vbt_3_V_0_state = 2'd0;
#0 vsum_4_V_0_sel_rd = 1'b0;
#0 vsum_4_V_0_sel_wr = 1'b0;
#0 vsum_4_V_0_state = 2'd0;
#0 vlr_4_V_0_sel_rd = 1'b0;
#0 vlr_4_V_0_sel_wr = 1'b0;
#0 vlr_4_V_0_state = 2'd0;
#0 vbt_4_V_0_sel_rd = 1'b0;
#0 vbt_4_V_0_sel_wr = 1'b0;
#0 vbt_4_V_0_state = 2'd0;
#0 comp_vsum_1_V = 26'd0;
#0 comp_11_V = 26'd0;
#0 comp_21_V = 26'd0;
#0 comp_31_V = 26'd0;
#0 comp_vsum_2_V = 26'd0;
#0 comp_12_V = 26'd0;
#0 comp_22_V = 26'd0;
#0 comp_32_V = 26'd0;
#0 comp_vsum_3_V = 26'd0;
#0 comp_13_V = 26'd0;
#0 comp_23_V = 26'd0;
#0 comp_33_V = 26'd0;
#0 comp_vsum_4_V = 26'd0;
#0 comp_14_V = 26'd0;
#0 comp_24_V = 26'd0;
#0 comp_34_V = 26'd0;
#0 contador = 32'd0;
end

max_det_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
max_det_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

max_det_peaks_V #(
    .DataWidth( 26 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
peaks_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(peaks_V_address0),
    .ce0(peaks_V_ce0),
    .we0(peaks_V_we0),
    .d0(peaks_V_d0),
    .q0(peaks_V_q0),
    .address1(peaks_V_address1),
    .ce1(peaks_V_ce1),
    .we1(peaks_V_we1),
    .d1(peaks_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_peaks_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_peaks_V_1_ack_out == 1'b1) & (out_peaks_V_1_vld_out == 1'b1))) begin
            out_peaks_V_1_sel_rd <= ~out_peaks_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_peaks_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_peaks_V_1_ack_in == 1'b1) & (out_peaks_V_1_vld_in == 1'b1))) begin
            out_peaks_V_1_sel_wr <= ~out_peaks_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_peaks_V_1_state <= 2'd0;
    end else begin
        if ((((out_peaks_V_1_state == 2'd2) & (out_peaks_V_1_vld_in == 1'b0)) | ((out_peaks_V_1_state == 2'd3) & (out_peaks_V_1_vld_in == 1'b0) & (out_peaks_V_1_ack_out == 1'b1)))) begin
            out_peaks_V_1_state <= 2'd2;
        end else if ((((out_peaks_V_1_state == 2'd1) & (out_peaks_V_1_ack_out == 1'b0)) | ((out_peaks_V_1_state == 2'd3) & (out_peaks_V_1_ack_out == 1'b0) & (out_peaks_V_1_vld_in == 1'b1)))) begin
            out_peaks_V_1_state <= 2'd1;
        end else if (((~((out_peaks_V_1_vld_in == 1'b0) & (out_peaks_V_1_ack_out == 1'b1)) & ~((out_peaks_V_1_ack_out == 1'b0) & (out_peaks_V_1_vld_in == 1'b1)) & (out_peaks_V_1_state == 2'd3)) | ((out_peaks_V_1_state == 2'd1) & (out_peaks_V_1_ack_out == 1'b1)) | ((out_peaks_V_1_state == 2'd2) & (out_peaks_V_1_vld_in == 1'b1)))) begin
            out_peaks_V_1_state <= 2'd3;
        end else begin
            out_peaks_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_1_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vbt_1_V_0_ack_out == 1'b1) & (vbt_1_V_0_vld_out == 1'b1))) begin
            vbt_1_V_0_sel_rd <= ~vbt_1_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_1_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vbt_1_V_0_ack_in == 1'b1) & (vbt_1_V_0_vld_in == 1'b1))) begin
            vbt_1_V_0_sel_wr <= ~vbt_1_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_1_V_0_state <= 2'd0;
    end else begin
        if ((((vbt_1_V_0_state == 2'd2) & (vbt_1_V_0_vld_in == 1'b0)) | ((vbt_1_V_0_state == 2'd3) & (vbt_1_V_0_vld_in == 1'b0) & (vbt_1_V_0_ack_out == 1'b1)))) begin
            vbt_1_V_0_state <= 2'd2;
        end else if ((((vbt_1_V_0_state == 2'd1) & (vbt_1_V_0_ack_out == 1'b0)) | ((vbt_1_V_0_state == 2'd3) & (vbt_1_V_0_ack_out == 1'b0) & (vbt_1_V_0_vld_in == 1'b1)))) begin
            vbt_1_V_0_state <= 2'd1;
        end else if (((~((vbt_1_V_0_vld_in == 1'b0) & (vbt_1_V_0_ack_out == 1'b1)) & ~((vbt_1_V_0_ack_out == 1'b0) & (vbt_1_V_0_vld_in == 1'b1)) & (vbt_1_V_0_state == 2'd3)) | ((vbt_1_V_0_state == 2'd1) & (vbt_1_V_0_ack_out == 1'b1)) | ((vbt_1_V_0_state == 2'd2) & (vbt_1_V_0_vld_in == 1'b1)))) begin
            vbt_1_V_0_state <= 2'd3;
        end else begin
            vbt_1_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_2_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vbt_2_V_0_ack_out == 1'b1) & (vbt_2_V_0_vld_out == 1'b1))) begin
            vbt_2_V_0_sel_rd <= ~vbt_2_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_2_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vbt_2_V_0_ack_in == 1'b1) & (vbt_2_V_0_vld_in == 1'b1))) begin
            vbt_2_V_0_sel_wr <= ~vbt_2_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_2_V_0_state <= 2'd0;
    end else begin
        if ((((vbt_2_V_0_state == 2'd2) & (vbt_2_V_0_vld_in == 1'b0)) | ((vbt_2_V_0_state == 2'd3) & (vbt_2_V_0_vld_in == 1'b0) & (vbt_2_V_0_ack_out == 1'b1)))) begin
            vbt_2_V_0_state <= 2'd2;
        end else if ((((vbt_2_V_0_state == 2'd1) & (vbt_2_V_0_ack_out == 1'b0)) | ((vbt_2_V_0_state == 2'd3) & (vbt_2_V_0_ack_out == 1'b0) & (vbt_2_V_0_vld_in == 1'b1)))) begin
            vbt_2_V_0_state <= 2'd1;
        end else if (((~((vbt_2_V_0_vld_in == 1'b0) & (vbt_2_V_0_ack_out == 1'b1)) & ~((vbt_2_V_0_ack_out == 1'b0) & (vbt_2_V_0_vld_in == 1'b1)) & (vbt_2_V_0_state == 2'd3)) | ((vbt_2_V_0_state == 2'd1) & (vbt_2_V_0_ack_out == 1'b1)) | ((vbt_2_V_0_state == 2'd2) & (vbt_2_V_0_vld_in == 1'b1)))) begin
            vbt_2_V_0_state <= 2'd3;
        end else begin
            vbt_2_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_3_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vbt_3_V_0_ack_out == 1'b1) & (vbt_3_V_0_vld_out == 1'b1))) begin
            vbt_3_V_0_sel_rd <= ~vbt_3_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_3_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vbt_3_V_0_ack_in == 1'b1) & (vbt_3_V_0_vld_in == 1'b1))) begin
            vbt_3_V_0_sel_wr <= ~vbt_3_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_3_V_0_state <= 2'd0;
    end else begin
        if ((((vbt_3_V_0_state == 2'd2) & (vbt_3_V_0_vld_in == 1'b0)) | ((vbt_3_V_0_state == 2'd3) & (vbt_3_V_0_vld_in == 1'b0) & (vbt_3_V_0_ack_out == 1'b1)))) begin
            vbt_3_V_0_state <= 2'd2;
        end else if ((((vbt_3_V_0_state == 2'd1) & (vbt_3_V_0_ack_out == 1'b0)) | ((vbt_3_V_0_state == 2'd3) & (vbt_3_V_0_ack_out == 1'b0) & (vbt_3_V_0_vld_in == 1'b1)))) begin
            vbt_3_V_0_state <= 2'd1;
        end else if (((~((vbt_3_V_0_vld_in == 1'b0) & (vbt_3_V_0_ack_out == 1'b1)) & ~((vbt_3_V_0_ack_out == 1'b0) & (vbt_3_V_0_vld_in == 1'b1)) & (vbt_3_V_0_state == 2'd3)) | ((vbt_3_V_0_state == 2'd1) & (vbt_3_V_0_ack_out == 1'b1)) | ((vbt_3_V_0_state == 2'd2) & (vbt_3_V_0_vld_in == 1'b1)))) begin
            vbt_3_V_0_state <= 2'd3;
        end else begin
            vbt_3_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_4_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vbt_4_V_0_ack_out == 1'b1) & (vbt_4_V_0_vld_out == 1'b1))) begin
            vbt_4_V_0_sel_rd <= ~vbt_4_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_4_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vbt_4_V_0_ack_in == 1'b1) & (vbt_4_V_0_vld_in == 1'b1))) begin
            vbt_4_V_0_sel_wr <= ~vbt_4_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vbt_4_V_0_state <= 2'd0;
    end else begin
        if ((((vbt_4_V_0_state == 2'd2) & (vbt_4_V_0_vld_in == 1'b0)) | ((vbt_4_V_0_state == 2'd3) & (vbt_4_V_0_vld_in == 1'b0) & (vbt_4_V_0_ack_out == 1'b1)))) begin
            vbt_4_V_0_state <= 2'd2;
        end else if ((((vbt_4_V_0_state == 2'd1) & (vbt_4_V_0_ack_out == 1'b0)) | ((vbt_4_V_0_state == 2'd3) & (vbt_4_V_0_ack_out == 1'b0) & (vbt_4_V_0_vld_in == 1'b1)))) begin
            vbt_4_V_0_state <= 2'd1;
        end else if (((~((vbt_4_V_0_vld_in == 1'b0) & (vbt_4_V_0_ack_out == 1'b1)) & ~((vbt_4_V_0_ack_out == 1'b0) & (vbt_4_V_0_vld_in == 1'b1)) & (vbt_4_V_0_state == 2'd3)) | ((vbt_4_V_0_state == 2'd1) & (vbt_4_V_0_ack_out == 1'b1)) | ((vbt_4_V_0_state == 2'd2) & (vbt_4_V_0_vld_in == 1'b1)))) begin
            vbt_4_V_0_state <= 2'd3;
        end else begin
            vbt_4_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_1_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vlr_1_V_0_ack_out == 1'b1) & (vlr_1_V_0_vld_out == 1'b1))) begin
            vlr_1_V_0_sel_rd <= ~vlr_1_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_1_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vlr_1_V_0_ack_in == 1'b1) & (vlr_1_V_0_vld_in == 1'b1))) begin
            vlr_1_V_0_sel_wr <= ~vlr_1_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_1_V_0_state <= 2'd0;
    end else begin
        if ((((vlr_1_V_0_state == 2'd2) & (vlr_1_V_0_vld_in == 1'b0)) | ((vlr_1_V_0_state == 2'd3) & (vlr_1_V_0_vld_in == 1'b0) & (vlr_1_V_0_ack_out == 1'b1)))) begin
            vlr_1_V_0_state <= 2'd2;
        end else if ((((vlr_1_V_0_state == 2'd1) & (vlr_1_V_0_ack_out == 1'b0)) | ((vlr_1_V_0_state == 2'd3) & (vlr_1_V_0_ack_out == 1'b0) & (vlr_1_V_0_vld_in == 1'b1)))) begin
            vlr_1_V_0_state <= 2'd1;
        end else if (((~((vlr_1_V_0_vld_in == 1'b0) & (vlr_1_V_0_ack_out == 1'b1)) & ~((vlr_1_V_0_ack_out == 1'b0) & (vlr_1_V_0_vld_in == 1'b1)) & (vlr_1_V_0_state == 2'd3)) | ((vlr_1_V_0_state == 2'd1) & (vlr_1_V_0_ack_out == 1'b1)) | ((vlr_1_V_0_state == 2'd2) & (vlr_1_V_0_vld_in == 1'b1)))) begin
            vlr_1_V_0_state <= 2'd3;
        end else begin
            vlr_1_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_2_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vlr_2_V_0_ack_out == 1'b1) & (vlr_2_V_0_vld_out == 1'b1))) begin
            vlr_2_V_0_sel_rd <= ~vlr_2_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_2_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vlr_2_V_0_ack_in == 1'b1) & (vlr_2_V_0_vld_in == 1'b1))) begin
            vlr_2_V_0_sel_wr <= ~vlr_2_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_2_V_0_state <= 2'd0;
    end else begin
        if ((((vlr_2_V_0_state == 2'd2) & (vlr_2_V_0_vld_in == 1'b0)) | ((vlr_2_V_0_state == 2'd3) & (vlr_2_V_0_vld_in == 1'b0) & (vlr_2_V_0_ack_out == 1'b1)))) begin
            vlr_2_V_0_state <= 2'd2;
        end else if ((((vlr_2_V_0_state == 2'd1) & (vlr_2_V_0_ack_out == 1'b0)) | ((vlr_2_V_0_state == 2'd3) & (vlr_2_V_0_ack_out == 1'b0) & (vlr_2_V_0_vld_in == 1'b1)))) begin
            vlr_2_V_0_state <= 2'd1;
        end else if (((~((vlr_2_V_0_vld_in == 1'b0) & (vlr_2_V_0_ack_out == 1'b1)) & ~((vlr_2_V_0_ack_out == 1'b0) & (vlr_2_V_0_vld_in == 1'b1)) & (vlr_2_V_0_state == 2'd3)) | ((vlr_2_V_0_state == 2'd1) & (vlr_2_V_0_ack_out == 1'b1)) | ((vlr_2_V_0_state == 2'd2) & (vlr_2_V_0_vld_in == 1'b1)))) begin
            vlr_2_V_0_state <= 2'd3;
        end else begin
            vlr_2_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_3_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vlr_3_V_0_ack_out == 1'b1) & (vlr_3_V_0_vld_out == 1'b1))) begin
            vlr_3_V_0_sel_rd <= ~vlr_3_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_3_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vlr_3_V_0_ack_in == 1'b1) & (vlr_3_V_0_vld_in == 1'b1))) begin
            vlr_3_V_0_sel_wr <= ~vlr_3_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_3_V_0_state <= 2'd0;
    end else begin
        if ((((vlr_3_V_0_state == 2'd2) & (vlr_3_V_0_vld_in == 1'b0)) | ((vlr_3_V_0_state == 2'd3) & (vlr_3_V_0_vld_in == 1'b0) & (vlr_3_V_0_ack_out == 1'b1)))) begin
            vlr_3_V_0_state <= 2'd2;
        end else if ((((vlr_3_V_0_state == 2'd1) & (vlr_3_V_0_ack_out == 1'b0)) | ((vlr_3_V_0_state == 2'd3) & (vlr_3_V_0_ack_out == 1'b0) & (vlr_3_V_0_vld_in == 1'b1)))) begin
            vlr_3_V_0_state <= 2'd1;
        end else if (((~((vlr_3_V_0_vld_in == 1'b0) & (vlr_3_V_0_ack_out == 1'b1)) & ~((vlr_3_V_0_ack_out == 1'b0) & (vlr_3_V_0_vld_in == 1'b1)) & (vlr_3_V_0_state == 2'd3)) | ((vlr_3_V_0_state == 2'd1) & (vlr_3_V_0_ack_out == 1'b1)) | ((vlr_3_V_0_state == 2'd2) & (vlr_3_V_0_vld_in == 1'b1)))) begin
            vlr_3_V_0_state <= 2'd3;
        end else begin
            vlr_3_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_4_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vlr_4_V_0_ack_out == 1'b1) & (vlr_4_V_0_vld_out == 1'b1))) begin
            vlr_4_V_0_sel_rd <= ~vlr_4_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_4_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vlr_4_V_0_ack_in == 1'b1) & (vlr_4_V_0_vld_in == 1'b1))) begin
            vlr_4_V_0_sel_wr <= ~vlr_4_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vlr_4_V_0_state <= 2'd0;
    end else begin
        if ((((vlr_4_V_0_state == 2'd2) & (vlr_4_V_0_vld_in == 1'b0)) | ((vlr_4_V_0_state == 2'd3) & (vlr_4_V_0_vld_in == 1'b0) & (vlr_4_V_0_ack_out == 1'b1)))) begin
            vlr_4_V_0_state <= 2'd2;
        end else if ((((vlr_4_V_0_state == 2'd1) & (vlr_4_V_0_ack_out == 1'b0)) | ((vlr_4_V_0_state == 2'd3) & (vlr_4_V_0_ack_out == 1'b0) & (vlr_4_V_0_vld_in == 1'b1)))) begin
            vlr_4_V_0_state <= 2'd1;
        end else if (((~((vlr_4_V_0_vld_in == 1'b0) & (vlr_4_V_0_ack_out == 1'b1)) & ~((vlr_4_V_0_ack_out == 1'b0) & (vlr_4_V_0_vld_in == 1'b1)) & (vlr_4_V_0_state == 2'd3)) | ((vlr_4_V_0_state == 2'd1) & (vlr_4_V_0_ack_out == 1'b1)) | ((vlr_4_V_0_state == 2'd2) & (vlr_4_V_0_vld_in == 1'b1)))) begin
            vlr_4_V_0_state <= 2'd3;
        end else begin
            vlr_4_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_1_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vsum_1_V_0_ack_out == 1'b1) & (vsum_1_V_0_vld_out == 1'b1))) begin
            vsum_1_V_0_sel_rd <= ~vsum_1_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_1_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vsum_1_V_0_ack_in == 1'b1) & (vsum_1_V_0_vld_in == 1'b1))) begin
            vsum_1_V_0_sel_wr <= ~vsum_1_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_1_V_0_state <= 2'd0;
    end else begin
        if ((((vsum_1_V_0_state == 2'd2) & (vsum_1_V_0_vld_in == 1'b0)) | ((vsum_1_V_0_state == 2'd3) & (vsum_1_V_0_vld_in == 1'b0) & (vsum_1_V_0_ack_out == 1'b1)))) begin
            vsum_1_V_0_state <= 2'd2;
        end else if ((((vsum_1_V_0_state == 2'd1) & (vsum_1_V_0_ack_out == 1'b0)) | ((vsum_1_V_0_state == 2'd3) & (vsum_1_V_0_ack_out == 1'b0) & (vsum_1_V_0_vld_in == 1'b1)))) begin
            vsum_1_V_0_state <= 2'd1;
        end else if (((~((vsum_1_V_0_vld_in == 1'b0) & (vsum_1_V_0_ack_out == 1'b1)) & ~((vsum_1_V_0_ack_out == 1'b0) & (vsum_1_V_0_vld_in == 1'b1)) & (vsum_1_V_0_state == 2'd3)) | ((vsum_1_V_0_state == 2'd1) & (vsum_1_V_0_ack_out == 1'b1)) | ((vsum_1_V_0_state == 2'd2) & (vsum_1_V_0_vld_in == 1'b1)))) begin
            vsum_1_V_0_state <= 2'd3;
        end else begin
            vsum_1_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_2_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vsum_2_V_0_ack_out == 1'b1) & (vsum_2_V_0_vld_out == 1'b1))) begin
            vsum_2_V_0_sel_rd <= ~vsum_2_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_2_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vsum_2_V_0_ack_in == 1'b1) & (vsum_2_V_0_vld_in == 1'b1))) begin
            vsum_2_V_0_sel_wr <= ~vsum_2_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_2_V_0_state <= 2'd0;
    end else begin
        if ((((vsum_2_V_0_state == 2'd2) & (vsum_2_V_0_vld_in == 1'b0)) | ((vsum_2_V_0_state == 2'd3) & (vsum_2_V_0_vld_in == 1'b0) & (vsum_2_V_0_ack_out == 1'b1)))) begin
            vsum_2_V_0_state <= 2'd2;
        end else if ((((vsum_2_V_0_state == 2'd1) & (vsum_2_V_0_ack_out == 1'b0)) | ((vsum_2_V_0_state == 2'd3) & (vsum_2_V_0_ack_out == 1'b0) & (vsum_2_V_0_vld_in == 1'b1)))) begin
            vsum_2_V_0_state <= 2'd1;
        end else if (((~((vsum_2_V_0_vld_in == 1'b0) & (vsum_2_V_0_ack_out == 1'b1)) & ~((vsum_2_V_0_ack_out == 1'b0) & (vsum_2_V_0_vld_in == 1'b1)) & (vsum_2_V_0_state == 2'd3)) | ((vsum_2_V_0_state == 2'd1) & (vsum_2_V_0_ack_out == 1'b1)) | ((vsum_2_V_0_state == 2'd2) & (vsum_2_V_0_vld_in == 1'b1)))) begin
            vsum_2_V_0_state <= 2'd3;
        end else begin
            vsum_2_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_3_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vsum_3_V_0_ack_out == 1'b1) & (vsum_3_V_0_vld_out == 1'b1))) begin
            vsum_3_V_0_sel_rd <= ~vsum_3_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_3_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vsum_3_V_0_ack_in == 1'b1) & (vsum_3_V_0_vld_in == 1'b1))) begin
            vsum_3_V_0_sel_wr <= ~vsum_3_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_3_V_0_state <= 2'd0;
    end else begin
        if ((((vsum_3_V_0_state == 2'd2) & (vsum_3_V_0_vld_in == 1'b0)) | ((vsum_3_V_0_state == 2'd3) & (vsum_3_V_0_vld_in == 1'b0) & (vsum_3_V_0_ack_out == 1'b1)))) begin
            vsum_3_V_0_state <= 2'd2;
        end else if ((((vsum_3_V_0_state == 2'd1) & (vsum_3_V_0_ack_out == 1'b0)) | ((vsum_3_V_0_state == 2'd3) & (vsum_3_V_0_ack_out == 1'b0) & (vsum_3_V_0_vld_in == 1'b1)))) begin
            vsum_3_V_0_state <= 2'd1;
        end else if (((~((vsum_3_V_0_vld_in == 1'b0) & (vsum_3_V_0_ack_out == 1'b1)) & ~((vsum_3_V_0_ack_out == 1'b0) & (vsum_3_V_0_vld_in == 1'b1)) & (vsum_3_V_0_state == 2'd3)) | ((vsum_3_V_0_state == 2'd1) & (vsum_3_V_0_ack_out == 1'b1)) | ((vsum_3_V_0_state == 2'd2) & (vsum_3_V_0_vld_in == 1'b1)))) begin
            vsum_3_V_0_state <= 2'd3;
        end else begin
            vsum_3_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_4_V_0_sel_rd <= 1'b0;
    end else begin
        if (((vsum_4_V_0_ack_out == 1'b1) & (vsum_4_V_0_vld_out == 1'b1))) begin
            vsum_4_V_0_sel_rd <= ~vsum_4_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_4_V_0_sel_wr <= 1'b0;
    end else begin
        if (((vsum_4_V_0_ack_in == 1'b1) & (vsum_4_V_0_vld_in == 1'b1))) begin
            vsum_4_V_0_sel_wr <= ~vsum_4_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        vsum_4_V_0_state <= 2'd0;
    end else begin
        if ((((vsum_4_V_0_state == 2'd2) & (vsum_4_V_0_vld_in == 1'b0)) | ((vsum_4_V_0_state == 2'd3) & (vsum_4_V_0_vld_in == 1'b0) & (vsum_4_V_0_ack_out == 1'b1)))) begin
            vsum_4_V_0_state <= 2'd2;
        end else if ((((vsum_4_V_0_state == 2'd1) & (vsum_4_V_0_ack_out == 1'b0)) | ((vsum_4_V_0_state == 2'd3) & (vsum_4_V_0_ack_out == 1'b0) & (vsum_4_V_0_vld_in == 1'b1)))) begin
            vsum_4_V_0_state <= 2'd1;
        end else if (((~((vsum_4_V_0_vld_in == 1'b0) & (vsum_4_V_0_ack_out == 1'b1)) & ~((vsum_4_V_0_ack_out == 1'b0) & (vsum_4_V_0_vld_in == 1'b1)) & (vsum_4_V_0_state == 2'd3)) | ((vsum_4_V_0_state == 2'd1) & (vsum_4_V_0_ack_out == 1'b1)) | ((vsum_4_V_0_state == 2'd2) & (vsum_4_V_0_vld_in == 1'b1)))) begin
            vsum_4_V_0_state <= 2'd3;
        end else begin
            vsum_4_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_11_V_new_1_reg_352 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_11_V_new_1_reg_352 <= vsum_i_1_V_2_fu_561_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_12_V_new_1_reg_407 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_12_V_new_1_reg_407 <= vsum_i_2_V_2_fu_573_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_13_V_new_1_reg_462 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_13_V_new_1_reg_462 <= vsum_i_3_V_2_fu_585_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_14_V_new_1_reg_517 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_14_V_new_1_reg_517 <= vsum_i_4_V_2_fu_597_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_21_V_new_1_reg_363 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_21_V_new_1_reg_363 <= vlr_test_1_V_fu_565_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_22_V_new_1_reg_418 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_22_V_new_1_reg_418 <= vlr_test_2_V_fu_577_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_23_V_new_1_reg_473 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_23_V_new_1_reg_473 <= vlr_test_3_V_fu_589_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_24_V_new_1_reg_528 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_24_V_new_1_reg_528 <= vlr_test_4_V_fu_601_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_31_V_new_1_reg_374 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_31_V_new_1_reg_374 <= vbt_test_1_V_fu_569_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_32_V_new_1_reg_429 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_32_V_new_1_reg_429 <= vbt_test_2_V_fu_581_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_33_V_new_1_reg_484 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_33_V_new_1_reg_484 <= vbt_test_3_V_fu_593_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_34_V_new_1_reg_539 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_34_V_new_1_reg_539 <= vbt_test_4_V_fu_605_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_vsum_1_V_flag_1_reg_330 <= 1'd1;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_vsum_1_V_flag_1_reg_330 <= tmp_4_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_vsum_1_V_new_1_reg_341 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_vsum_1_V_new_1_reg_341 <= vsum_test_1_V_1_fu_621_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_vsum_2_V_flag_1_reg_385 <= 1'd1;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_vsum_2_V_flag_1_reg_385 <= tmp_9_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_vsum_2_V_new_1_reg_396 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_vsum_2_V_new_1_reg_396 <= vsum_i_2_V_2_Val2_s_fu_689_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_vsum_3_V_flag_1_reg_440 <= 1'd1;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_vsum_3_V_flag_1_reg_440 <= tmp_1_fu_767_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_vsum_3_V_new_1_reg_451 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_vsum_3_V_new_1_reg_451 <= vsum_i_3_V_2_Val2_s_fu_755_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_vsum_4_V_flag_1_reg_495 <= 1'd1;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_vsum_4_V_flag_1_reg_495 <= tmp_3_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        comp_vsum_4_V_new_1_reg_506 <= 26'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        comp_vsum_4_V_new_1_reg_506 <= vsum_i_4_V_2_Val2_s_fu_821_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        contador_new_reg_550 <= 32'd0;
    end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        contador_new_reg_550 <= tmp_6_fu_879_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_reg_319 <= i_1_reg_1176;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_319 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_comp_vsum_1_V_flag_1_phi_fu_334_p4 == 1'd1) & (out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        comp_11_V <= comp_11_V_new_1_reg_352;
        comp_21_V <= comp_21_V_new_1_reg_363;
        comp_31_V <= comp_31_V_new_1_reg_374;
        comp_vsum_1_V <= comp_vsum_1_V_new_1_reg_341;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_comp_vsum_2_V_flag_1_phi_fu_389_p4 == 1'd1) & (out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        comp_12_V <= comp_12_V_new_1_reg_407;
        comp_22_V <= comp_22_V_new_1_reg_418;
        comp_32_V <= comp_32_V_new_1_reg_429;
        comp_vsum_2_V <= comp_vsum_2_V_new_1_reg_396;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_comp_vsum_3_V_flag_1_phi_fu_444_p4 == 1'd1) & (out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        comp_13_V <= comp_13_V_new_1_reg_462;
        comp_23_V <= comp_23_V_new_1_reg_473;
        comp_33_V <= comp_33_V_new_1_reg_484;
        comp_vsum_3_V <= comp_vsum_3_V_new_1_reg_451;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_comp_vsum_4_V_flag_1_phi_fu_499_p4 == 1'd1) & (out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        comp_14_V <= comp_14_V_new_1_reg_517;
        comp_24_V <= comp_24_V_new_1_reg_528;
        comp_34_V <= comp_34_V_new_1_reg_539;
        comp_vsum_4_V <= comp_vsum_4_V_new_1_reg_506;
    end
end

always @ (posedge ap_clk) begin
    if (((out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        contador <= contador_new_reg_550;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_1176 <= i_1_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_peaks_V_1_load_A == 1'b1)) begin
        out_peaks_V_1_payload_A <= tmp_10_fu_908_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((out_peaks_V_1_load_B == 1'b1)) begin
        out_peaks_V_1_payload_B <= tmp_10_fu_908_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((vbt_1_V_0_load_A == 1'b1)) begin
        vbt_1_V_0_payload_A <= vbt_1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vbt_1_V_0_load_B == 1'b1)) begin
        vbt_1_V_0_payload_B <= vbt_1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vbt_2_V_0_load_A == 1'b1)) begin
        vbt_2_V_0_payload_A <= vbt_2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vbt_2_V_0_load_B == 1'b1)) begin
        vbt_2_V_0_payload_B <= vbt_2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vbt_3_V_0_load_A == 1'b1)) begin
        vbt_3_V_0_payload_A <= vbt_3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vbt_3_V_0_load_B == 1'b1)) begin
        vbt_3_V_0_payload_B <= vbt_3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vbt_4_V_0_load_A == 1'b1)) begin
        vbt_4_V_0_payload_A <= vbt_4_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vbt_4_V_0_load_B == 1'b1)) begin
        vbt_4_V_0_payload_B <= vbt_4_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vbt_test_1_V_comp_s_reg_1085 <= vbt_test_1_V_comp_s_fu_669_p3;
        vbt_test_2_V_comp_s_reg_1110 <= vbt_test_2_V_comp_s_fu_735_p3;
        vbt_test_3_V_comp_s_reg_1135 <= vbt_test_3_V_comp_s_fu_801_p3;
        vbt_test_4_V_comp_s_reg_1160 <= vbt_test_4_V_comp_s_fu_867_p3;
        vlr_test_2_V_comp_s_reg_1105 <= vlr_test_2_V_comp_s_fu_727_p3;
        vlr_test_3_V_comp_s_reg_1130 <= vlr_test_3_V_comp_s_fu_793_p3;
        vlr_test_4_V_comp_s_reg_1155 <= vlr_test_4_V_comp_s_fu_859_p3;
        vsum_i_2_V_1_comp_s_reg_1100 <= vsum_i_2_V_1_comp_s_fu_719_p3;
        vsum_i_3_V_1_comp_s_reg_1125 <= vsum_i_3_V_1_comp_s_fu_785_p3;
        vsum_i_4_V_1_comp_s_reg_1150 <= vsum_i_4_V_1_comp_s_fu_851_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((vlr_1_V_0_load_A == 1'b1)) begin
        vlr_1_V_0_payload_A <= vlr_1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vlr_1_V_0_load_B == 1'b1)) begin
        vlr_1_V_0_payload_B <= vlr_1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vlr_2_V_0_load_A == 1'b1)) begin
        vlr_2_V_0_payload_A <= vlr_2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vlr_2_V_0_load_B == 1'b1)) begin
        vlr_2_V_0_payload_B <= vlr_2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vlr_3_V_0_load_A == 1'b1)) begin
        vlr_3_V_0_payload_A <= vlr_3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vlr_3_V_0_load_B == 1'b1)) begin
        vlr_3_V_0_payload_B <= vlr_3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vlr_4_V_0_load_A == 1'b1)) begin
        vlr_4_V_0_payload_A <= vlr_4_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vlr_4_V_0_load_B == 1'b1)) begin
        vlr_4_V_0_payload_B <= vlr_4_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vsum_1_V_0_load_A == 1'b1)) begin
        vsum_1_V_0_payload_A <= vsum_1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vsum_1_V_0_load_B == 1'b1)) begin
        vsum_1_V_0_payload_B <= vsum_1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vsum_2_V_0_load_A == 1'b1)) begin
        vsum_2_V_0_payload_A <= vsum_2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vsum_2_V_0_load_B == 1'b1)) begin
        vsum_2_V_0_payload_B <= vsum_2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vsum_3_V_0_load_A == 1'b1)) begin
        vsum_3_V_0_payload_A <= vsum_3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vsum_3_V_0_load_B == 1'b1)) begin
        vsum_3_V_0_payload_B <= vsum_3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vsum_4_V_0_load_A == 1'b1)) begin
        vsum_4_V_0_payload_A <= vsum_4_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((vsum_4_V_0_load_B == 1'b1)) begin
        vsum_4_V_0_payload_B <= vsum_4_V_TDATA;
    end
end

always @ (*) begin
    if (((out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((out_peaks_V_1_sel == 1'b1)) begin
        out_peaks_V_1_data_out = out_peaks_V_1_payload_B;
    end else begin
        out_peaks_V_1_data_out = out_peaks_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        out_peaks_V_1_vld_in = 1'b1;
    end else begin
        out_peaks_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        out_peaks_V_TDATA_blk_n = out_peaks_V_1_state[1'd1];
    end else begin
        out_peaks_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        peaks_V_address0 = tmp_8_fu_903_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        peaks_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        peaks_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        peaks_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        peaks_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        peaks_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        peaks_V_address0 = 64'd0;
    end else begin
        peaks_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        peaks_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        peaks_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        peaks_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        peaks_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        peaks_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        peaks_V_address1 = 64'd1;
    end else begin
        peaks_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        peaks_V_ce0 = 1'b1;
    end else begin
        peaks_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        peaks_V_ce1 = 1'b1;
    end else begin
        peaks_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        peaks_V_d0 = vlr_test_4_V_comp_s_reg_1155;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        peaks_V_d0 = vbt_test_3_V_comp_s_reg_1135;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        peaks_V_d0 = vsum_i_3_V_1_comp_s_reg_1125;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        peaks_V_d0 = vlr_test_2_V_comp_s_reg_1105;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        peaks_V_d0 = vbt_test_1_V_comp_s_reg_1085;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        peaks_V_d0 = vsum_i_1_V_1_comp_s_fu_651_p3;
    end else begin
        peaks_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        peaks_V_d1 = vbt_test_4_V_comp_s_reg_1160;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        peaks_V_d1 = vsum_i_4_V_1_comp_s_reg_1150;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        peaks_V_d1 = vlr_test_3_V_comp_s_reg_1130;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        peaks_V_d1 = vbt_test_2_V_comp_s_reg_1110;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        peaks_V_d1 = vsum_i_2_V_1_comp_s_reg_1100;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        peaks_V_d1 = vlr_test_1_V_comp_s_fu_660_p3;
    end else begin
        peaks_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        peaks_V_we0 = 1'b1;
    end else begin
        peaks_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        peaks_V_we1 = 1'b1;
    end else begin
        peaks_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vbt_1_V_0_ack_out = 1'b1;
    end else begin
        vbt_1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vbt_1_V_0_sel == 1'b1)) begin
        vbt_1_V_0_data_out = vbt_1_V_0_payload_B;
    end else begin
        vbt_1_V_0_data_out = vbt_1_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vbt_1_V_TDATA_blk_n = vbt_1_V_0_state[1'd0];
    end else begin
        vbt_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vbt_2_V_0_ack_out = 1'b1;
    end else begin
        vbt_2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vbt_2_V_0_sel == 1'b1)) begin
        vbt_2_V_0_data_out = vbt_2_V_0_payload_B;
    end else begin
        vbt_2_V_0_data_out = vbt_2_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vbt_2_V_TDATA_blk_n = vbt_2_V_0_state[1'd0];
    end else begin
        vbt_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vbt_3_V_0_ack_out = 1'b1;
    end else begin
        vbt_3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vbt_3_V_0_sel == 1'b1)) begin
        vbt_3_V_0_data_out = vbt_3_V_0_payload_B;
    end else begin
        vbt_3_V_0_data_out = vbt_3_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vbt_3_V_TDATA_blk_n = vbt_3_V_0_state[1'd0];
    end else begin
        vbt_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vbt_4_V_0_ack_out = 1'b1;
    end else begin
        vbt_4_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vbt_4_V_0_sel == 1'b1)) begin
        vbt_4_V_0_data_out = vbt_4_V_0_payload_B;
    end else begin
        vbt_4_V_0_data_out = vbt_4_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vbt_4_V_TDATA_blk_n = vbt_4_V_0_state[1'd0];
    end else begin
        vbt_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vlr_1_V_0_ack_out = 1'b1;
    end else begin
        vlr_1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vlr_1_V_0_sel == 1'b1)) begin
        vlr_1_V_0_data_out = vlr_1_V_0_payload_B;
    end else begin
        vlr_1_V_0_data_out = vlr_1_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vlr_1_V_TDATA_blk_n = vlr_1_V_0_state[1'd0];
    end else begin
        vlr_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vlr_2_V_0_ack_out = 1'b1;
    end else begin
        vlr_2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vlr_2_V_0_sel == 1'b1)) begin
        vlr_2_V_0_data_out = vlr_2_V_0_payload_B;
    end else begin
        vlr_2_V_0_data_out = vlr_2_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vlr_2_V_TDATA_blk_n = vlr_2_V_0_state[1'd0];
    end else begin
        vlr_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vlr_3_V_0_ack_out = 1'b1;
    end else begin
        vlr_3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vlr_3_V_0_sel == 1'b1)) begin
        vlr_3_V_0_data_out = vlr_3_V_0_payload_B;
    end else begin
        vlr_3_V_0_data_out = vlr_3_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vlr_3_V_TDATA_blk_n = vlr_3_V_0_state[1'd0];
    end else begin
        vlr_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vlr_4_V_0_ack_out = 1'b1;
    end else begin
        vlr_4_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vlr_4_V_0_sel == 1'b1)) begin
        vlr_4_V_0_data_out = vlr_4_V_0_payload_B;
    end else begin
        vlr_4_V_0_data_out = vlr_4_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vlr_4_V_TDATA_blk_n = vlr_4_V_0_state[1'd0];
    end else begin
        vlr_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vsum_1_V_0_ack_out = 1'b1;
    end else begin
        vsum_1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vsum_1_V_0_sel == 1'b1)) begin
        vsum_1_V_0_data_out = vsum_1_V_0_payload_B;
    end else begin
        vsum_1_V_0_data_out = vsum_1_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vsum_1_V_TDATA_blk_n = vsum_1_V_0_state[1'd0];
    end else begin
        vsum_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vsum_2_V_0_ack_out = 1'b1;
    end else begin
        vsum_2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vsum_2_V_0_sel == 1'b1)) begin
        vsum_2_V_0_data_out = vsum_2_V_0_payload_B;
    end else begin
        vsum_2_V_0_data_out = vsum_2_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vsum_2_V_TDATA_blk_n = vsum_2_V_0_state[1'd0];
    end else begin
        vsum_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vsum_3_V_0_ack_out = 1'b1;
    end else begin
        vsum_3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vsum_3_V_0_sel == 1'b1)) begin
        vsum_3_V_0_data_out = vsum_3_V_0_payload_B;
    end else begin
        vsum_3_V_0_data_out = vsum_3_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vsum_3_V_TDATA_blk_n = vsum_3_V_0_state[1'd0];
    end else begin
        vsum_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        vsum_4_V_0_ack_out = 1'b1;
    end else begin
        vsum_4_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((vsum_4_V_0_sel == 1'b1)) begin
        vsum_4_V_0_data_out = vsum_4_V_0_payload_B;
    end else begin
        vsum_4_V_0_data_out = vsum_4_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vsum_4_V_TDATA_blk_n = vsum_4_V_0_state[1'd0];
    end else begin
        vsum_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if ((~((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0)) & (tmp_7_fu_885_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond_fu_891_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((out_peaks_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = ((vbt_4_V_0_vld_out == 1'b0) | (vlr_4_V_0_vld_out == 1'b0) | (vsum_4_V_0_vld_out == 1'b0) | (vbt_3_V_0_vld_out == 1'b0) | (vlr_3_V_0_vld_out == 1'b0) | (vsum_3_V_0_vld_out == 1'b0) | (vsum_1_V_0_vld_out == 1'b0) | (vbt_2_V_0_vld_out == 1'b0) | (vlr_2_V_0_vld_out == 1'b0) | (vsum_2_V_0_vld_out == 1'b0) | (vbt_1_V_0_vld_out == 1'b0) | (vlr_1_V_0_vld_out == 1'b0));
end

assign ap_phi_mux_comp_vsum_1_V_flag_1_phi_fu_334_p4 = comp_vsum_1_V_flag_1_reg_330;

assign ap_phi_mux_comp_vsum_2_V_flag_1_phi_fu_389_p4 = comp_vsum_2_V_flag_1_reg_385;

assign ap_phi_mux_comp_vsum_3_V_flag_1_phi_fu_444_p4 = comp_vsum_3_V_flag_1_reg_440;

assign ap_phi_mux_comp_vsum_4_V_flag_1_phi_fu_499_p4 = comp_vsum_4_V_flag_1_reg_495;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_891_p2 = ((i_reg_319 == 4'd12) ? 1'b1 : 1'b0);

assign i_1_fu_897_p2 = (i_reg_319 + 4'd1);

assign out_peaks_V_1_ack_in = out_peaks_V_1_state[1'd1];

assign out_peaks_V_1_ack_out = out_peaks_V_TREADY;

assign out_peaks_V_1_load_A = (out_peaks_V_1_state_cmp_full & ~out_peaks_V_1_sel_wr);

assign out_peaks_V_1_load_B = (out_peaks_V_1_state_cmp_full & out_peaks_V_1_sel_wr);

assign out_peaks_V_1_sel = out_peaks_V_1_sel_rd;

assign out_peaks_V_1_state_cmp_full = ((out_peaks_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_peaks_V_1_vld_out = out_peaks_V_1_state[1'd0];

assign out_peaks_V_TDATA = out_peaks_V_1_data_out;

assign out_peaks_V_TVALID = out_peaks_V_1_state[1'd0];

assign tmp_10_fu_908_p1 = $signed(peaks_V_q0);

assign tmp_1_fu_767_p2 = (($signed(vsum_i_3_V_2_Val2_s_fu_755_p3) > $signed(comp_vsum_3_V)) ? 1'b1 : 1'b0);

assign tmp_2_fu_809_p2 = (($signed(vsum_i_4_V_2_fu_597_p1) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign tmp_3_fu_833_p2 = (($signed(vsum_i_4_V_2_Val2_s_fu_821_p3) > $signed(comp_vsum_4_V)) ? 1'b1 : 1'b0);

assign tmp_4_fu_633_p2 = (($signed(vsum_test_1_V_1_fu_621_p3) > $signed(comp_vsum_1_V)) ? 1'b1 : 1'b0);

assign tmp_5_fu_677_p2 = (($signed(vsum_i_2_V_2_fu_573_p1) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign tmp_6_fu_879_p2 = (32'd1 + contador);

assign tmp_7_fu_885_p2 = ((tmp_6_fu_879_p2 == 32'd25000) ? 1'b1 : 1'b0);

assign tmp_8_fu_903_p1 = i_reg_319;

assign tmp_9_fu_701_p2 = (($signed(vsum_i_2_V_2_Val2_s_fu_689_p3) > $signed(comp_vsum_2_V)) ? 1'b1 : 1'b0);

assign tmp_fu_609_p2 = (($signed(vsum_i_1_V_2_fu_561_p1) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_743_p2 = (($signed(vsum_i_3_V_2_fu_585_p1) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign vbt_1_V_0_ack_in = vbt_1_V_0_state[1'd1];

assign vbt_1_V_0_load_A = (vbt_1_V_0_state_cmp_full & ~vbt_1_V_0_sel_wr);

assign vbt_1_V_0_load_B = (vbt_1_V_0_state_cmp_full & vbt_1_V_0_sel_wr);

assign vbt_1_V_0_sel = vbt_1_V_0_sel_rd;

assign vbt_1_V_0_state_cmp_full = ((vbt_1_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vbt_1_V_0_vld_in = vbt_1_V_TVALID;

assign vbt_1_V_0_vld_out = vbt_1_V_0_state[1'd0];

assign vbt_1_V_TREADY = vbt_1_V_0_state[1'd1];

assign vbt_2_V_0_ack_in = vbt_2_V_0_state[1'd1];

assign vbt_2_V_0_load_A = (vbt_2_V_0_state_cmp_full & ~vbt_2_V_0_sel_wr);

assign vbt_2_V_0_load_B = (vbt_2_V_0_state_cmp_full & vbt_2_V_0_sel_wr);

assign vbt_2_V_0_sel = vbt_2_V_0_sel_rd;

assign vbt_2_V_0_state_cmp_full = ((vbt_2_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vbt_2_V_0_vld_in = vbt_2_V_TVALID;

assign vbt_2_V_0_vld_out = vbt_2_V_0_state[1'd0];

assign vbt_2_V_TREADY = vbt_2_V_0_state[1'd1];

assign vbt_3_V_0_ack_in = vbt_3_V_0_state[1'd1];

assign vbt_3_V_0_load_A = (vbt_3_V_0_state_cmp_full & ~vbt_3_V_0_sel_wr);

assign vbt_3_V_0_load_B = (vbt_3_V_0_state_cmp_full & vbt_3_V_0_sel_wr);

assign vbt_3_V_0_sel = vbt_3_V_0_sel_rd;

assign vbt_3_V_0_state_cmp_full = ((vbt_3_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vbt_3_V_0_vld_in = vbt_3_V_TVALID;

assign vbt_3_V_0_vld_out = vbt_3_V_0_state[1'd0];

assign vbt_3_V_TREADY = vbt_3_V_0_state[1'd1];

assign vbt_4_V_0_ack_in = vbt_4_V_0_state[1'd1];

assign vbt_4_V_0_load_A = (vbt_4_V_0_state_cmp_full & ~vbt_4_V_0_sel_wr);

assign vbt_4_V_0_load_B = (vbt_4_V_0_state_cmp_full & vbt_4_V_0_sel_wr);

assign vbt_4_V_0_sel = vbt_4_V_0_sel_rd;

assign vbt_4_V_0_state_cmp_full = ((vbt_4_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vbt_4_V_0_vld_in = vbt_4_V_TVALID;

assign vbt_4_V_0_vld_out = vbt_4_V_0_state[1'd0];

assign vbt_4_V_TREADY = vbt_4_V_0_state[1'd1];

assign vbt_test_1_V_comp_s_fu_669_p3 = ((tmp_4_fu_633_p2[0:0] === 1'b1) ? vbt_test_1_V_fu_569_p1 : comp_31_V);

assign vbt_test_1_V_fu_569_p1 = vbt_1_V_0_data_out[25:0];

assign vbt_test_2_V_comp_s_fu_735_p3 = ((tmp_9_fu_701_p2[0:0] === 1'b1) ? vbt_test_2_V_fu_581_p1 : comp_32_V);

assign vbt_test_2_V_fu_581_p1 = vbt_2_V_0_data_out[25:0];

assign vbt_test_3_V_comp_s_fu_801_p3 = ((tmp_1_fu_767_p2[0:0] === 1'b1) ? vbt_test_3_V_fu_593_p1 : comp_33_V);

assign vbt_test_3_V_fu_593_p1 = vbt_3_V_0_data_out[25:0];

assign vbt_test_4_V_comp_s_fu_867_p3 = ((tmp_3_fu_833_p2[0:0] === 1'b1) ? vbt_test_4_V_fu_605_p1 : comp_34_V);

assign vbt_test_4_V_fu_605_p1 = vbt_4_V_0_data_out[25:0];

assign vlr_1_V_0_ack_in = vlr_1_V_0_state[1'd1];

assign vlr_1_V_0_load_A = (vlr_1_V_0_state_cmp_full & ~vlr_1_V_0_sel_wr);

assign vlr_1_V_0_load_B = (vlr_1_V_0_state_cmp_full & vlr_1_V_0_sel_wr);

assign vlr_1_V_0_sel = vlr_1_V_0_sel_rd;

assign vlr_1_V_0_state_cmp_full = ((vlr_1_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vlr_1_V_0_vld_in = vlr_1_V_TVALID;

assign vlr_1_V_0_vld_out = vlr_1_V_0_state[1'd0];

assign vlr_1_V_TREADY = vlr_1_V_0_state[1'd1];

assign vlr_2_V_0_ack_in = vlr_2_V_0_state[1'd1];

assign vlr_2_V_0_load_A = (vlr_2_V_0_state_cmp_full & ~vlr_2_V_0_sel_wr);

assign vlr_2_V_0_load_B = (vlr_2_V_0_state_cmp_full & vlr_2_V_0_sel_wr);

assign vlr_2_V_0_sel = vlr_2_V_0_sel_rd;

assign vlr_2_V_0_state_cmp_full = ((vlr_2_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vlr_2_V_0_vld_in = vlr_2_V_TVALID;

assign vlr_2_V_0_vld_out = vlr_2_V_0_state[1'd0];

assign vlr_2_V_TREADY = vlr_2_V_0_state[1'd1];

assign vlr_3_V_0_ack_in = vlr_3_V_0_state[1'd1];

assign vlr_3_V_0_load_A = (vlr_3_V_0_state_cmp_full & ~vlr_3_V_0_sel_wr);

assign vlr_3_V_0_load_B = (vlr_3_V_0_state_cmp_full & vlr_3_V_0_sel_wr);

assign vlr_3_V_0_sel = vlr_3_V_0_sel_rd;

assign vlr_3_V_0_state_cmp_full = ((vlr_3_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vlr_3_V_0_vld_in = vlr_3_V_TVALID;

assign vlr_3_V_0_vld_out = vlr_3_V_0_state[1'd0];

assign vlr_3_V_TREADY = vlr_3_V_0_state[1'd1];

assign vlr_4_V_0_ack_in = vlr_4_V_0_state[1'd1];

assign vlr_4_V_0_load_A = (vlr_4_V_0_state_cmp_full & ~vlr_4_V_0_sel_wr);

assign vlr_4_V_0_load_B = (vlr_4_V_0_state_cmp_full & vlr_4_V_0_sel_wr);

assign vlr_4_V_0_sel = vlr_4_V_0_sel_rd;

assign vlr_4_V_0_state_cmp_full = ((vlr_4_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vlr_4_V_0_vld_in = vlr_4_V_TVALID;

assign vlr_4_V_0_vld_out = vlr_4_V_0_state[1'd0];

assign vlr_4_V_TREADY = vlr_4_V_0_state[1'd1];

assign vlr_test_1_V_comp_s_fu_660_p3 = ((tmp_4_fu_633_p2[0:0] === 1'b1) ? vlr_test_1_V_fu_565_p1 : comp_21_V);

assign vlr_test_1_V_fu_565_p1 = vlr_1_V_0_data_out[25:0];

assign vlr_test_2_V_comp_s_fu_727_p3 = ((tmp_9_fu_701_p2[0:0] === 1'b1) ? vlr_test_2_V_fu_577_p1 : comp_22_V);

assign vlr_test_2_V_fu_577_p1 = vlr_2_V_0_data_out[25:0];

assign vlr_test_3_V_comp_s_fu_793_p3 = ((tmp_1_fu_767_p2[0:0] === 1'b1) ? vlr_test_3_V_fu_589_p1 : comp_23_V);

assign vlr_test_3_V_fu_589_p1 = vlr_3_V_0_data_out[25:0];

assign vlr_test_4_V_comp_s_fu_859_p3 = ((tmp_3_fu_833_p2[0:0] === 1'b1) ? vlr_test_4_V_fu_601_p1 : comp_24_V);

assign vlr_test_4_V_fu_601_p1 = vlr_4_V_0_data_out[25:0];

assign vsum_1_V_0_ack_in = vsum_1_V_0_state[1'd1];

assign vsum_1_V_0_load_A = (vsum_1_V_0_state_cmp_full & ~vsum_1_V_0_sel_wr);

assign vsum_1_V_0_load_B = (vsum_1_V_0_state_cmp_full & vsum_1_V_0_sel_wr);

assign vsum_1_V_0_sel = vsum_1_V_0_sel_rd;

assign vsum_1_V_0_state_cmp_full = ((vsum_1_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vsum_1_V_0_vld_in = vsum_1_V_TVALID;

assign vsum_1_V_0_vld_out = vsum_1_V_0_state[1'd0];

assign vsum_1_V_TREADY = vsum_1_V_0_state[1'd1];

assign vsum_2_V_0_ack_in = vsum_2_V_0_state[1'd1];

assign vsum_2_V_0_load_A = (vsum_2_V_0_state_cmp_full & ~vsum_2_V_0_sel_wr);

assign vsum_2_V_0_load_B = (vsum_2_V_0_state_cmp_full & vsum_2_V_0_sel_wr);

assign vsum_2_V_0_sel = vsum_2_V_0_sel_rd;

assign vsum_2_V_0_state_cmp_full = ((vsum_2_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vsum_2_V_0_vld_in = vsum_2_V_TVALID;

assign vsum_2_V_0_vld_out = vsum_2_V_0_state[1'd0];

assign vsum_2_V_TREADY = vsum_2_V_0_state[1'd1];

assign vsum_3_V_0_ack_in = vsum_3_V_0_state[1'd1];

assign vsum_3_V_0_load_A = (vsum_3_V_0_state_cmp_full & ~vsum_3_V_0_sel_wr);

assign vsum_3_V_0_load_B = (vsum_3_V_0_state_cmp_full & vsum_3_V_0_sel_wr);

assign vsum_3_V_0_sel = vsum_3_V_0_sel_rd;

assign vsum_3_V_0_state_cmp_full = ((vsum_3_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vsum_3_V_0_vld_in = vsum_3_V_TVALID;

assign vsum_3_V_0_vld_out = vsum_3_V_0_state[1'd0];

assign vsum_3_V_TREADY = vsum_3_V_0_state[1'd1];

assign vsum_4_V_0_ack_in = vsum_4_V_0_state[1'd1];

assign vsum_4_V_0_load_A = (vsum_4_V_0_state_cmp_full & ~vsum_4_V_0_sel_wr);

assign vsum_4_V_0_load_B = (vsum_4_V_0_state_cmp_full & vsum_4_V_0_sel_wr);

assign vsum_4_V_0_sel = vsum_4_V_0_sel_rd;

assign vsum_4_V_0_state_cmp_full = ((vsum_4_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign vsum_4_V_0_vld_in = vsum_4_V_TVALID;

assign vsum_4_V_0_vld_out = vsum_4_V_0_state[1'd0];

assign vsum_4_V_TREADY = vsum_4_V_0_state[1'd1];

assign vsum_i_1_V_1_comp_s_fu_651_p3 = ((tmp_4_fu_633_p2[0:0] === 1'b1) ? vsum_i_1_V_2_fu_561_p1 : comp_11_V);

assign vsum_i_1_V_2_fu_561_p1 = vsum_1_V_0_data_out[25:0];

assign vsum_i_1_V_fu_615_p2 = (26'd0 - vsum_i_1_V_2_fu_561_p1);

assign vsum_i_2_V_1_comp_s_fu_719_p3 = ((tmp_9_fu_701_p2[0:0] === 1'b1) ? vsum_i_2_V_2_fu_573_p1 : comp_12_V);

assign vsum_i_2_V_2_Val2_s_fu_689_p3 = ((tmp_5_fu_677_p2[0:0] === 1'b1) ? vsum_i_2_V_2_fu_573_p1 : vsum_i_2_V_fu_683_p2);

assign vsum_i_2_V_2_fu_573_p1 = vsum_2_V_0_data_out[25:0];

assign vsum_i_2_V_fu_683_p2 = (26'd0 - vsum_i_2_V_2_fu_573_p1);

assign vsum_i_3_V_1_comp_s_fu_785_p3 = ((tmp_1_fu_767_p2[0:0] === 1'b1) ? vsum_i_3_V_2_fu_585_p1 : comp_13_V);

assign vsum_i_3_V_2_Val2_s_fu_755_p3 = ((tmp_s_fu_743_p2[0:0] === 1'b1) ? vsum_i_3_V_2_fu_585_p1 : vsum_i_3_V_fu_749_p2);

assign vsum_i_3_V_2_fu_585_p1 = vsum_3_V_0_data_out[25:0];

assign vsum_i_3_V_fu_749_p2 = (26'd0 - vsum_i_3_V_2_fu_585_p1);

assign vsum_i_4_V_1_comp_s_fu_851_p3 = ((tmp_3_fu_833_p2[0:0] === 1'b1) ? vsum_i_4_V_2_fu_597_p1 : comp_14_V);

assign vsum_i_4_V_2_Val2_s_fu_821_p3 = ((tmp_2_fu_809_p2[0:0] === 1'b1) ? vsum_i_4_V_2_fu_597_p1 : vsum_i_4_V_fu_815_p2);

assign vsum_i_4_V_2_fu_597_p1 = vsum_4_V_0_data_out[25:0];

assign vsum_i_4_V_fu_815_p2 = (26'd0 - vsum_i_4_V_2_fu_597_p1);

assign vsum_test_1_V_1_fu_621_p3 = ((tmp_fu_609_p2[0:0] === 1'b1) ? vsum_i_1_V_2_fu_561_p1 : vsum_i_1_V_fu_615_p2);

endmodule //max_det
