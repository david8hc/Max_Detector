-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_det is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    vsum_1_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vsum_1_V_TVALID : IN STD_LOGIC;
    vsum_1_V_TREADY : OUT STD_LOGIC;
    vlr_1_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vlr_1_V_TVALID : IN STD_LOGIC;
    vlr_1_V_TREADY : OUT STD_LOGIC;
    vbt_1_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vbt_1_V_TVALID : IN STD_LOGIC;
    vbt_1_V_TREADY : OUT STD_LOGIC;
    out_peaks_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_peaks_V_TVALID : OUT STD_LOGIC;
    out_peaks_V_TREADY : IN STD_LOGIC;
    vsum_2_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vsum_2_V_TVALID : IN STD_LOGIC;
    vsum_2_V_TREADY : OUT STD_LOGIC;
    vlr_2_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vlr_2_V_TVALID : IN STD_LOGIC;
    vlr_2_V_TREADY : OUT STD_LOGIC;
    vbt_2_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vbt_2_V_TVALID : IN STD_LOGIC;
    vbt_2_V_TREADY : OUT STD_LOGIC;
    vsum_3_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vsum_3_V_TVALID : IN STD_LOGIC;
    vsum_3_V_TREADY : OUT STD_LOGIC;
    vlr_3_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vlr_3_V_TVALID : IN STD_LOGIC;
    vlr_3_V_TREADY : OUT STD_LOGIC;
    vbt_3_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vbt_3_V_TVALID : IN STD_LOGIC;
    vbt_3_V_TREADY : OUT STD_LOGIC;
    vsum_4_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vsum_4_V_TVALID : IN STD_LOGIC;
    vsum_4_V_TREADY : OUT STD_LOGIC;
    vlr_4_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vlr_4_V_TVALID : IN STD_LOGIC;
    vlr_4_V_TREADY : OUT STD_LOGIC;
    vbt_4_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    vbt_4_V_TVALID : IN STD_LOGIC;
    vbt_4_V_TREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of max_det is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_det,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.184000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2099,HLS_SYN_LUT=1966}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_61A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110000110101000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal vsum_1_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_1_V_0_vld_in : STD_LOGIC;
    signal vsum_1_V_0_vld_out : STD_LOGIC;
    signal vsum_1_V_0_ack_in : STD_LOGIC;
    signal vsum_1_V_0_ack_out : STD_LOGIC;
    signal vsum_1_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_1_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_1_V_0_sel_rd : STD_LOGIC := '0';
    signal vsum_1_V_0_sel_wr : STD_LOGIC := '0';
    signal vsum_1_V_0_sel : STD_LOGIC;
    signal vsum_1_V_0_load_A : STD_LOGIC;
    signal vsum_1_V_0_load_B : STD_LOGIC;
    signal vsum_1_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vsum_1_V_0_state_cmp_full : STD_LOGIC;
    signal vlr_1_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_1_V_0_vld_in : STD_LOGIC;
    signal vlr_1_V_0_vld_out : STD_LOGIC;
    signal vlr_1_V_0_ack_in : STD_LOGIC;
    signal vlr_1_V_0_ack_out : STD_LOGIC;
    signal vlr_1_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_1_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_1_V_0_sel_rd : STD_LOGIC := '0';
    signal vlr_1_V_0_sel_wr : STD_LOGIC := '0';
    signal vlr_1_V_0_sel : STD_LOGIC;
    signal vlr_1_V_0_load_A : STD_LOGIC;
    signal vlr_1_V_0_load_B : STD_LOGIC;
    signal vlr_1_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vlr_1_V_0_state_cmp_full : STD_LOGIC;
    signal vbt_1_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_1_V_0_vld_in : STD_LOGIC;
    signal vbt_1_V_0_vld_out : STD_LOGIC;
    signal vbt_1_V_0_ack_in : STD_LOGIC;
    signal vbt_1_V_0_ack_out : STD_LOGIC;
    signal vbt_1_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_1_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_1_V_0_sel_rd : STD_LOGIC := '0';
    signal vbt_1_V_0_sel_wr : STD_LOGIC := '0';
    signal vbt_1_V_0_sel : STD_LOGIC;
    signal vbt_1_V_0_load_A : STD_LOGIC;
    signal vbt_1_V_0_load_B : STD_LOGIC;
    signal vbt_1_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vbt_1_V_0_state_cmp_full : STD_LOGIC;
    signal out_peaks_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_peaks_V_1_vld_in : STD_LOGIC;
    signal out_peaks_V_1_vld_out : STD_LOGIC;
    signal out_peaks_V_1_ack_in : STD_LOGIC;
    signal out_peaks_V_1_ack_out : STD_LOGIC;
    signal out_peaks_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_peaks_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_peaks_V_1_sel_rd : STD_LOGIC := '0';
    signal out_peaks_V_1_sel_wr : STD_LOGIC := '0';
    signal out_peaks_V_1_sel : STD_LOGIC;
    signal out_peaks_V_1_load_A : STD_LOGIC;
    signal out_peaks_V_1_load_B : STD_LOGIC;
    signal out_peaks_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_peaks_V_1_state_cmp_full : STD_LOGIC;
    signal vsum_2_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_2_V_0_vld_in : STD_LOGIC;
    signal vsum_2_V_0_vld_out : STD_LOGIC;
    signal vsum_2_V_0_ack_in : STD_LOGIC;
    signal vsum_2_V_0_ack_out : STD_LOGIC;
    signal vsum_2_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_2_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_2_V_0_sel_rd : STD_LOGIC := '0';
    signal vsum_2_V_0_sel_wr : STD_LOGIC := '0';
    signal vsum_2_V_0_sel : STD_LOGIC;
    signal vsum_2_V_0_load_A : STD_LOGIC;
    signal vsum_2_V_0_load_B : STD_LOGIC;
    signal vsum_2_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vsum_2_V_0_state_cmp_full : STD_LOGIC;
    signal vlr_2_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_2_V_0_vld_in : STD_LOGIC;
    signal vlr_2_V_0_vld_out : STD_LOGIC;
    signal vlr_2_V_0_ack_in : STD_LOGIC;
    signal vlr_2_V_0_ack_out : STD_LOGIC;
    signal vlr_2_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_2_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_2_V_0_sel_rd : STD_LOGIC := '0';
    signal vlr_2_V_0_sel_wr : STD_LOGIC := '0';
    signal vlr_2_V_0_sel : STD_LOGIC;
    signal vlr_2_V_0_load_A : STD_LOGIC;
    signal vlr_2_V_0_load_B : STD_LOGIC;
    signal vlr_2_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vlr_2_V_0_state_cmp_full : STD_LOGIC;
    signal vbt_2_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_2_V_0_vld_in : STD_LOGIC;
    signal vbt_2_V_0_vld_out : STD_LOGIC;
    signal vbt_2_V_0_ack_in : STD_LOGIC;
    signal vbt_2_V_0_ack_out : STD_LOGIC;
    signal vbt_2_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_2_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_2_V_0_sel_rd : STD_LOGIC := '0';
    signal vbt_2_V_0_sel_wr : STD_LOGIC := '0';
    signal vbt_2_V_0_sel : STD_LOGIC;
    signal vbt_2_V_0_load_A : STD_LOGIC;
    signal vbt_2_V_0_load_B : STD_LOGIC;
    signal vbt_2_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vbt_2_V_0_state_cmp_full : STD_LOGIC;
    signal vsum_3_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_3_V_0_vld_in : STD_LOGIC;
    signal vsum_3_V_0_vld_out : STD_LOGIC;
    signal vsum_3_V_0_ack_in : STD_LOGIC;
    signal vsum_3_V_0_ack_out : STD_LOGIC;
    signal vsum_3_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_3_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_3_V_0_sel_rd : STD_LOGIC := '0';
    signal vsum_3_V_0_sel_wr : STD_LOGIC := '0';
    signal vsum_3_V_0_sel : STD_LOGIC;
    signal vsum_3_V_0_load_A : STD_LOGIC;
    signal vsum_3_V_0_load_B : STD_LOGIC;
    signal vsum_3_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vsum_3_V_0_state_cmp_full : STD_LOGIC;
    signal vlr_3_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_3_V_0_vld_in : STD_LOGIC;
    signal vlr_3_V_0_vld_out : STD_LOGIC;
    signal vlr_3_V_0_ack_in : STD_LOGIC;
    signal vlr_3_V_0_ack_out : STD_LOGIC;
    signal vlr_3_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_3_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_3_V_0_sel_rd : STD_LOGIC := '0';
    signal vlr_3_V_0_sel_wr : STD_LOGIC := '0';
    signal vlr_3_V_0_sel : STD_LOGIC;
    signal vlr_3_V_0_load_A : STD_LOGIC;
    signal vlr_3_V_0_load_B : STD_LOGIC;
    signal vlr_3_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vlr_3_V_0_state_cmp_full : STD_LOGIC;
    signal vbt_3_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_3_V_0_vld_in : STD_LOGIC;
    signal vbt_3_V_0_vld_out : STD_LOGIC;
    signal vbt_3_V_0_ack_in : STD_LOGIC;
    signal vbt_3_V_0_ack_out : STD_LOGIC;
    signal vbt_3_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_3_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_3_V_0_sel_rd : STD_LOGIC := '0';
    signal vbt_3_V_0_sel_wr : STD_LOGIC := '0';
    signal vbt_3_V_0_sel : STD_LOGIC;
    signal vbt_3_V_0_load_A : STD_LOGIC;
    signal vbt_3_V_0_load_B : STD_LOGIC;
    signal vbt_3_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vbt_3_V_0_state_cmp_full : STD_LOGIC;
    signal vsum_4_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_4_V_0_vld_in : STD_LOGIC;
    signal vsum_4_V_0_vld_out : STD_LOGIC;
    signal vsum_4_V_0_ack_in : STD_LOGIC;
    signal vsum_4_V_0_ack_out : STD_LOGIC;
    signal vsum_4_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_4_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vsum_4_V_0_sel_rd : STD_LOGIC := '0';
    signal vsum_4_V_0_sel_wr : STD_LOGIC := '0';
    signal vsum_4_V_0_sel : STD_LOGIC;
    signal vsum_4_V_0_load_A : STD_LOGIC;
    signal vsum_4_V_0_load_B : STD_LOGIC;
    signal vsum_4_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vsum_4_V_0_state_cmp_full : STD_LOGIC;
    signal vlr_4_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_4_V_0_vld_in : STD_LOGIC;
    signal vlr_4_V_0_vld_out : STD_LOGIC;
    signal vlr_4_V_0_ack_in : STD_LOGIC;
    signal vlr_4_V_0_ack_out : STD_LOGIC;
    signal vlr_4_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_4_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vlr_4_V_0_sel_rd : STD_LOGIC := '0';
    signal vlr_4_V_0_sel_wr : STD_LOGIC := '0';
    signal vlr_4_V_0_sel : STD_LOGIC;
    signal vlr_4_V_0_load_A : STD_LOGIC;
    signal vlr_4_V_0_load_B : STD_LOGIC;
    signal vlr_4_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vlr_4_V_0_state_cmp_full : STD_LOGIC;
    signal vbt_4_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_4_V_0_vld_in : STD_LOGIC;
    signal vbt_4_V_0_vld_out : STD_LOGIC;
    signal vbt_4_V_0_ack_in : STD_LOGIC;
    signal vbt_4_V_0_ack_out : STD_LOGIC;
    signal vbt_4_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_4_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal vbt_4_V_0_sel_rd : STD_LOGIC := '0';
    signal vbt_4_V_0_sel_wr : STD_LOGIC := '0';
    signal vbt_4_V_0_sel : STD_LOGIC;
    signal vbt_4_V_0_load_A : STD_LOGIC;
    signal vbt_4_V_0_load_B : STD_LOGIC;
    signal vbt_4_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal vbt_4_V_0_state_cmp_full : STD_LOGIC;
    signal comp_vsum_1_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_11_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_21_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_31_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_vsum_2_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_12_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_22_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_32_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_vsum_3_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_13_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_23_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_33_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_vsum_4_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_14_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_24_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal comp_34_V : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal contador : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal vsum_1_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal vlr_1_V_TDATA_blk_n : STD_LOGIC;
    signal vbt_1_V_TDATA_blk_n : STD_LOGIC;
    signal out_peaks_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal vsum_2_V_TDATA_blk_n : STD_LOGIC;
    signal vlr_2_V_TDATA_blk_n : STD_LOGIC;
    signal vbt_2_V_TDATA_blk_n : STD_LOGIC;
    signal vsum_3_V_TDATA_blk_n : STD_LOGIC;
    signal vlr_3_V_TDATA_blk_n : STD_LOGIC;
    signal vbt_3_V_TDATA_blk_n : STD_LOGIC;
    signal vsum_4_V_TDATA_blk_n : STD_LOGIC;
    signal vlr_4_V_TDATA_blk_n : STD_LOGIC;
    signal vbt_4_V_TDATA_blk_n : STD_LOGIC;
    signal vsum_i_1_V_2_fu_561_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal vlr_test_1_V_fu_565_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_1_V_fu_569_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_i_2_V_2_fu_573_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_2_V_fu_577_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_2_V_fu_581_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_i_3_V_2_fu_585_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_3_V_fu_589_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_3_V_fu_593_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_i_4_V_2_fu_597_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_4_V_fu_601_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_4_V_fu_605_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_test_1_V_1_fu_621_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_4_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vbt_test_1_V_comp_s_fu_669_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_1_V_comp_s_reg_1085 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_i_2_V_2_Val2_s_fu_689_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_9_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vsum_i_2_V_1_comp_s_fu_719_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_i_2_V_1_comp_s_reg_1100 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_2_V_comp_s_fu_727_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_2_V_comp_s_reg_1105 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_2_V_comp_s_fu_735_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_2_V_comp_s_reg_1110 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_i_3_V_2_Val2_s_fu_755_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_1_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vsum_i_3_V_1_comp_s_fu_785_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_i_3_V_1_comp_s_reg_1125 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_3_V_comp_s_fu_793_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_3_V_comp_s_reg_1130 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_3_V_comp_s_fu_801_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_3_V_comp_s_reg_1135 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_i_4_V_2_Val2_s_fu_821_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_3_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vsum_i_4_V_1_comp_s_fu_851_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vsum_i_4_V_1_comp_s_reg_1150 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_4_V_comp_s_fu_859_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_4_V_comp_s_reg_1155 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_4_V_comp_s_fu_867_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vbt_test_4_V_comp_s_reg_1160 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_6_fu_879_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_897_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_1176 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_908_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal peaks_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal peaks_V_ce0 : STD_LOGIC;
    signal peaks_V_we0 : STD_LOGIC;
    signal peaks_V_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal peaks_V_q0 : STD_LOGIC_VECTOR (25 downto 0);
    signal peaks_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal peaks_V_ce1 : STD_LOGIC;
    signal peaks_V_we1 : STD_LOGIC;
    signal peaks_V_d1 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_reg_319 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_comp_vsum_1_V_flag_1_phi_fu_334_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal comp_vsum_1_V_flag_1_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comp_vsum_1_V_new_1_reg_341 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_11_V_new_1_reg_352 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_21_V_new_1_reg_363 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_31_V_new_1_reg_374 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_phi_mux_comp_vsum_2_V_flag_1_phi_fu_389_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal comp_vsum_2_V_flag_1_reg_385 : STD_LOGIC_VECTOR (0 downto 0);
    signal comp_vsum_2_V_new_1_reg_396 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_12_V_new_1_reg_407 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_22_V_new_1_reg_418 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_32_V_new_1_reg_429 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_phi_mux_comp_vsum_3_V_flag_1_phi_fu_444_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal comp_vsum_3_V_flag_1_reg_440 : STD_LOGIC_VECTOR (0 downto 0);
    signal comp_vsum_3_V_new_1_reg_451 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_13_V_new_1_reg_462 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_23_V_new_1_reg_473 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_33_V_new_1_reg_484 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_phi_mux_comp_vsum_4_V_flag_1_phi_fu_499_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal comp_vsum_4_V_flag_1_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal comp_vsum_4_V_new_1_reg_506 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_14_V_new_1_reg_517 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_24_V_new_1_reg_528 : STD_LOGIC_VECTOR (25 downto 0);
    signal comp_34_V_new_1_reg_539 : STD_LOGIC_VECTOR (25 downto 0);
    signal contador_new_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_8_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal vsum_i_1_V_1_comp_s_fu_651_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal vlr_test_1_V_comp_s_fu_660_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vsum_i_1_V_fu_615_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_5_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vsum_i_2_V_fu_683_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_s_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vsum_i_3_V_fu_749_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_2_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vsum_i_4_V_fu_815_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component max_det_peaks_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (25 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component max_det_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    max_det_AXILiteS_s_axi_U : component max_det_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    peaks_V_U : component max_det_peaks_V
    generic map (
        DataWidth => 26,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => peaks_V_address0,
        ce0 => peaks_V_ce0,
        we0 => peaks_V_we0,
        d0 => peaks_V_d0,
        q0 => peaks_V_q0,
        address1 => peaks_V_address1,
        ce1 => peaks_V_ce1,
        we1 => peaks_V_we1,
        d1 => peaks_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_peaks_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_peaks_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_peaks_V_1_ack_out = ap_const_logic_1) and (out_peaks_V_1_vld_out = ap_const_logic_1))) then 
                                        out_peaks_V_1_sel_rd <= not(out_peaks_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_peaks_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_peaks_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_peaks_V_1_ack_in = ap_const_logic_1) and (out_peaks_V_1_vld_in = ap_const_logic_1))) then 
                                        out_peaks_V_1_sel_wr <= not(out_peaks_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_peaks_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_peaks_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_peaks_V_1_state = ap_const_lv2_2) and (out_peaks_V_1_vld_in = ap_const_logic_0)) or ((out_peaks_V_1_state = ap_const_lv2_3) and (out_peaks_V_1_vld_in = ap_const_logic_0) and (out_peaks_V_1_ack_out = ap_const_logic_1)))) then 
                    out_peaks_V_1_state <= ap_const_lv2_2;
                elsif ((((out_peaks_V_1_state = ap_const_lv2_1) and (out_peaks_V_1_ack_out = ap_const_logic_0)) or ((out_peaks_V_1_state = ap_const_lv2_3) and (out_peaks_V_1_ack_out = ap_const_logic_0) and (out_peaks_V_1_vld_in = ap_const_logic_1)))) then 
                    out_peaks_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_peaks_V_1_vld_in = ap_const_logic_0) and (out_peaks_V_1_ack_out = ap_const_logic_1))) and not(((out_peaks_V_1_ack_out = ap_const_logic_0) and (out_peaks_V_1_vld_in = ap_const_logic_1))) and (out_peaks_V_1_state = ap_const_lv2_3)) or ((out_peaks_V_1_state = ap_const_lv2_1) and (out_peaks_V_1_ack_out = ap_const_logic_1)) or ((out_peaks_V_1_state = ap_const_lv2_2) and (out_peaks_V_1_vld_in = ap_const_logic_1)))) then 
                    out_peaks_V_1_state <= ap_const_lv2_3;
                else 
                    out_peaks_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vbt_1_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_1_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vbt_1_V_0_ack_out = ap_const_logic_1) and (vbt_1_V_0_vld_out = ap_const_logic_1))) then 
                                        vbt_1_V_0_sel_rd <= not(vbt_1_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vbt_1_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_1_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vbt_1_V_0_ack_in = ap_const_logic_1) and (vbt_1_V_0_vld_in = ap_const_logic_1))) then 
                                        vbt_1_V_0_sel_wr <= not(vbt_1_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vbt_1_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_1_V_0_state <= ap_const_lv2_0;
            else
                if ((((vbt_1_V_0_state = ap_const_lv2_2) and (vbt_1_V_0_vld_in = ap_const_logic_0)) or ((vbt_1_V_0_state = ap_const_lv2_3) and (vbt_1_V_0_vld_in = ap_const_logic_0) and (vbt_1_V_0_ack_out = ap_const_logic_1)))) then 
                    vbt_1_V_0_state <= ap_const_lv2_2;
                elsif ((((vbt_1_V_0_state = ap_const_lv2_1) and (vbt_1_V_0_ack_out = ap_const_logic_0)) or ((vbt_1_V_0_state = ap_const_lv2_3) and (vbt_1_V_0_ack_out = ap_const_logic_0) and (vbt_1_V_0_vld_in = ap_const_logic_1)))) then 
                    vbt_1_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vbt_1_V_0_vld_in = ap_const_logic_0) and (vbt_1_V_0_ack_out = ap_const_logic_1))) and not(((vbt_1_V_0_ack_out = ap_const_logic_0) and (vbt_1_V_0_vld_in = ap_const_logic_1))) and (vbt_1_V_0_state = ap_const_lv2_3)) or ((vbt_1_V_0_state = ap_const_lv2_1) and (vbt_1_V_0_ack_out = ap_const_logic_1)) or ((vbt_1_V_0_state = ap_const_lv2_2) and (vbt_1_V_0_vld_in = ap_const_logic_1)))) then 
                    vbt_1_V_0_state <= ap_const_lv2_3;
                else 
                    vbt_1_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vbt_2_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_2_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vbt_2_V_0_ack_out = ap_const_logic_1) and (vbt_2_V_0_vld_out = ap_const_logic_1))) then 
                                        vbt_2_V_0_sel_rd <= not(vbt_2_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vbt_2_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_2_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vbt_2_V_0_ack_in = ap_const_logic_1) and (vbt_2_V_0_vld_in = ap_const_logic_1))) then 
                                        vbt_2_V_0_sel_wr <= not(vbt_2_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vbt_2_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_2_V_0_state <= ap_const_lv2_0;
            else
                if ((((vbt_2_V_0_state = ap_const_lv2_2) and (vbt_2_V_0_vld_in = ap_const_logic_0)) or ((vbt_2_V_0_state = ap_const_lv2_3) and (vbt_2_V_0_vld_in = ap_const_logic_0) and (vbt_2_V_0_ack_out = ap_const_logic_1)))) then 
                    vbt_2_V_0_state <= ap_const_lv2_2;
                elsif ((((vbt_2_V_0_state = ap_const_lv2_1) and (vbt_2_V_0_ack_out = ap_const_logic_0)) or ((vbt_2_V_0_state = ap_const_lv2_3) and (vbt_2_V_0_ack_out = ap_const_logic_0) and (vbt_2_V_0_vld_in = ap_const_logic_1)))) then 
                    vbt_2_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vbt_2_V_0_vld_in = ap_const_logic_0) and (vbt_2_V_0_ack_out = ap_const_logic_1))) and not(((vbt_2_V_0_ack_out = ap_const_logic_0) and (vbt_2_V_0_vld_in = ap_const_logic_1))) and (vbt_2_V_0_state = ap_const_lv2_3)) or ((vbt_2_V_0_state = ap_const_lv2_1) and (vbt_2_V_0_ack_out = ap_const_logic_1)) or ((vbt_2_V_0_state = ap_const_lv2_2) and (vbt_2_V_0_vld_in = ap_const_logic_1)))) then 
                    vbt_2_V_0_state <= ap_const_lv2_3;
                else 
                    vbt_2_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vbt_3_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_3_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vbt_3_V_0_ack_out = ap_const_logic_1) and (vbt_3_V_0_vld_out = ap_const_logic_1))) then 
                                        vbt_3_V_0_sel_rd <= not(vbt_3_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vbt_3_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_3_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vbt_3_V_0_ack_in = ap_const_logic_1) and (vbt_3_V_0_vld_in = ap_const_logic_1))) then 
                                        vbt_3_V_0_sel_wr <= not(vbt_3_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vbt_3_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_3_V_0_state <= ap_const_lv2_0;
            else
                if ((((vbt_3_V_0_state = ap_const_lv2_2) and (vbt_3_V_0_vld_in = ap_const_logic_0)) or ((vbt_3_V_0_state = ap_const_lv2_3) and (vbt_3_V_0_vld_in = ap_const_logic_0) and (vbt_3_V_0_ack_out = ap_const_logic_1)))) then 
                    vbt_3_V_0_state <= ap_const_lv2_2;
                elsif ((((vbt_3_V_0_state = ap_const_lv2_1) and (vbt_3_V_0_ack_out = ap_const_logic_0)) or ((vbt_3_V_0_state = ap_const_lv2_3) and (vbt_3_V_0_ack_out = ap_const_logic_0) and (vbt_3_V_0_vld_in = ap_const_logic_1)))) then 
                    vbt_3_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vbt_3_V_0_vld_in = ap_const_logic_0) and (vbt_3_V_0_ack_out = ap_const_logic_1))) and not(((vbt_3_V_0_ack_out = ap_const_logic_0) and (vbt_3_V_0_vld_in = ap_const_logic_1))) and (vbt_3_V_0_state = ap_const_lv2_3)) or ((vbt_3_V_0_state = ap_const_lv2_1) and (vbt_3_V_0_ack_out = ap_const_logic_1)) or ((vbt_3_V_0_state = ap_const_lv2_2) and (vbt_3_V_0_vld_in = ap_const_logic_1)))) then 
                    vbt_3_V_0_state <= ap_const_lv2_3;
                else 
                    vbt_3_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vbt_4_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_4_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vbt_4_V_0_ack_out = ap_const_logic_1) and (vbt_4_V_0_vld_out = ap_const_logic_1))) then 
                                        vbt_4_V_0_sel_rd <= not(vbt_4_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vbt_4_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_4_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vbt_4_V_0_ack_in = ap_const_logic_1) and (vbt_4_V_0_vld_in = ap_const_logic_1))) then 
                                        vbt_4_V_0_sel_wr <= not(vbt_4_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vbt_4_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vbt_4_V_0_state <= ap_const_lv2_0;
            else
                if ((((vbt_4_V_0_state = ap_const_lv2_2) and (vbt_4_V_0_vld_in = ap_const_logic_0)) or ((vbt_4_V_0_state = ap_const_lv2_3) and (vbt_4_V_0_vld_in = ap_const_logic_0) and (vbt_4_V_0_ack_out = ap_const_logic_1)))) then 
                    vbt_4_V_0_state <= ap_const_lv2_2;
                elsif ((((vbt_4_V_0_state = ap_const_lv2_1) and (vbt_4_V_0_ack_out = ap_const_logic_0)) or ((vbt_4_V_0_state = ap_const_lv2_3) and (vbt_4_V_0_ack_out = ap_const_logic_0) and (vbt_4_V_0_vld_in = ap_const_logic_1)))) then 
                    vbt_4_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vbt_4_V_0_vld_in = ap_const_logic_0) and (vbt_4_V_0_ack_out = ap_const_logic_1))) and not(((vbt_4_V_0_ack_out = ap_const_logic_0) and (vbt_4_V_0_vld_in = ap_const_logic_1))) and (vbt_4_V_0_state = ap_const_lv2_3)) or ((vbt_4_V_0_state = ap_const_lv2_1) and (vbt_4_V_0_ack_out = ap_const_logic_1)) or ((vbt_4_V_0_state = ap_const_lv2_2) and (vbt_4_V_0_vld_in = ap_const_logic_1)))) then 
                    vbt_4_V_0_state <= ap_const_lv2_3;
                else 
                    vbt_4_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vlr_1_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_1_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vlr_1_V_0_ack_out = ap_const_logic_1) and (vlr_1_V_0_vld_out = ap_const_logic_1))) then 
                                        vlr_1_V_0_sel_rd <= not(vlr_1_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vlr_1_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_1_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vlr_1_V_0_ack_in = ap_const_logic_1) and (vlr_1_V_0_vld_in = ap_const_logic_1))) then 
                                        vlr_1_V_0_sel_wr <= not(vlr_1_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vlr_1_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_1_V_0_state <= ap_const_lv2_0;
            else
                if ((((vlr_1_V_0_state = ap_const_lv2_2) and (vlr_1_V_0_vld_in = ap_const_logic_0)) or ((vlr_1_V_0_state = ap_const_lv2_3) and (vlr_1_V_0_vld_in = ap_const_logic_0) and (vlr_1_V_0_ack_out = ap_const_logic_1)))) then 
                    vlr_1_V_0_state <= ap_const_lv2_2;
                elsif ((((vlr_1_V_0_state = ap_const_lv2_1) and (vlr_1_V_0_ack_out = ap_const_logic_0)) or ((vlr_1_V_0_state = ap_const_lv2_3) and (vlr_1_V_0_ack_out = ap_const_logic_0) and (vlr_1_V_0_vld_in = ap_const_logic_1)))) then 
                    vlr_1_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vlr_1_V_0_vld_in = ap_const_logic_0) and (vlr_1_V_0_ack_out = ap_const_logic_1))) and not(((vlr_1_V_0_ack_out = ap_const_logic_0) and (vlr_1_V_0_vld_in = ap_const_logic_1))) and (vlr_1_V_0_state = ap_const_lv2_3)) or ((vlr_1_V_0_state = ap_const_lv2_1) and (vlr_1_V_0_ack_out = ap_const_logic_1)) or ((vlr_1_V_0_state = ap_const_lv2_2) and (vlr_1_V_0_vld_in = ap_const_logic_1)))) then 
                    vlr_1_V_0_state <= ap_const_lv2_3;
                else 
                    vlr_1_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vlr_2_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_2_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vlr_2_V_0_ack_out = ap_const_logic_1) and (vlr_2_V_0_vld_out = ap_const_logic_1))) then 
                                        vlr_2_V_0_sel_rd <= not(vlr_2_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vlr_2_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_2_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vlr_2_V_0_ack_in = ap_const_logic_1) and (vlr_2_V_0_vld_in = ap_const_logic_1))) then 
                                        vlr_2_V_0_sel_wr <= not(vlr_2_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vlr_2_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_2_V_0_state <= ap_const_lv2_0;
            else
                if ((((vlr_2_V_0_state = ap_const_lv2_2) and (vlr_2_V_0_vld_in = ap_const_logic_0)) or ((vlr_2_V_0_state = ap_const_lv2_3) and (vlr_2_V_0_vld_in = ap_const_logic_0) and (vlr_2_V_0_ack_out = ap_const_logic_1)))) then 
                    vlr_2_V_0_state <= ap_const_lv2_2;
                elsif ((((vlr_2_V_0_state = ap_const_lv2_1) and (vlr_2_V_0_ack_out = ap_const_logic_0)) or ((vlr_2_V_0_state = ap_const_lv2_3) and (vlr_2_V_0_ack_out = ap_const_logic_0) and (vlr_2_V_0_vld_in = ap_const_logic_1)))) then 
                    vlr_2_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vlr_2_V_0_vld_in = ap_const_logic_0) and (vlr_2_V_0_ack_out = ap_const_logic_1))) and not(((vlr_2_V_0_ack_out = ap_const_logic_0) and (vlr_2_V_0_vld_in = ap_const_logic_1))) and (vlr_2_V_0_state = ap_const_lv2_3)) or ((vlr_2_V_0_state = ap_const_lv2_1) and (vlr_2_V_0_ack_out = ap_const_logic_1)) or ((vlr_2_V_0_state = ap_const_lv2_2) and (vlr_2_V_0_vld_in = ap_const_logic_1)))) then 
                    vlr_2_V_0_state <= ap_const_lv2_3;
                else 
                    vlr_2_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vlr_3_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_3_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vlr_3_V_0_ack_out = ap_const_logic_1) and (vlr_3_V_0_vld_out = ap_const_logic_1))) then 
                                        vlr_3_V_0_sel_rd <= not(vlr_3_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vlr_3_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_3_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vlr_3_V_0_ack_in = ap_const_logic_1) and (vlr_3_V_0_vld_in = ap_const_logic_1))) then 
                                        vlr_3_V_0_sel_wr <= not(vlr_3_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vlr_3_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_3_V_0_state <= ap_const_lv2_0;
            else
                if ((((vlr_3_V_0_state = ap_const_lv2_2) and (vlr_3_V_0_vld_in = ap_const_logic_0)) or ((vlr_3_V_0_state = ap_const_lv2_3) and (vlr_3_V_0_vld_in = ap_const_logic_0) and (vlr_3_V_0_ack_out = ap_const_logic_1)))) then 
                    vlr_3_V_0_state <= ap_const_lv2_2;
                elsif ((((vlr_3_V_0_state = ap_const_lv2_1) and (vlr_3_V_0_ack_out = ap_const_logic_0)) or ((vlr_3_V_0_state = ap_const_lv2_3) and (vlr_3_V_0_ack_out = ap_const_logic_0) and (vlr_3_V_0_vld_in = ap_const_logic_1)))) then 
                    vlr_3_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vlr_3_V_0_vld_in = ap_const_logic_0) and (vlr_3_V_0_ack_out = ap_const_logic_1))) and not(((vlr_3_V_0_ack_out = ap_const_logic_0) and (vlr_3_V_0_vld_in = ap_const_logic_1))) and (vlr_3_V_0_state = ap_const_lv2_3)) or ((vlr_3_V_0_state = ap_const_lv2_1) and (vlr_3_V_0_ack_out = ap_const_logic_1)) or ((vlr_3_V_0_state = ap_const_lv2_2) and (vlr_3_V_0_vld_in = ap_const_logic_1)))) then 
                    vlr_3_V_0_state <= ap_const_lv2_3;
                else 
                    vlr_3_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vlr_4_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_4_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vlr_4_V_0_ack_out = ap_const_logic_1) and (vlr_4_V_0_vld_out = ap_const_logic_1))) then 
                                        vlr_4_V_0_sel_rd <= not(vlr_4_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vlr_4_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_4_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vlr_4_V_0_ack_in = ap_const_logic_1) and (vlr_4_V_0_vld_in = ap_const_logic_1))) then 
                                        vlr_4_V_0_sel_wr <= not(vlr_4_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vlr_4_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vlr_4_V_0_state <= ap_const_lv2_0;
            else
                if ((((vlr_4_V_0_state = ap_const_lv2_2) and (vlr_4_V_0_vld_in = ap_const_logic_0)) or ((vlr_4_V_0_state = ap_const_lv2_3) and (vlr_4_V_0_vld_in = ap_const_logic_0) and (vlr_4_V_0_ack_out = ap_const_logic_1)))) then 
                    vlr_4_V_0_state <= ap_const_lv2_2;
                elsif ((((vlr_4_V_0_state = ap_const_lv2_1) and (vlr_4_V_0_ack_out = ap_const_logic_0)) or ((vlr_4_V_0_state = ap_const_lv2_3) and (vlr_4_V_0_ack_out = ap_const_logic_0) and (vlr_4_V_0_vld_in = ap_const_logic_1)))) then 
                    vlr_4_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vlr_4_V_0_vld_in = ap_const_logic_0) and (vlr_4_V_0_ack_out = ap_const_logic_1))) and not(((vlr_4_V_0_ack_out = ap_const_logic_0) and (vlr_4_V_0_vld_in = ap_const_logic_1))) and (vlr_4_V_0_state = ap_const_lv2_3)) or ((vlr_4_V_0_state = ap_const_lv2_1) and (vlr_4_V_0_ack_out = ap_const_logic_1)) or ((vlr_4_V_0_state = ap_const_lv2_2) and (vlr_4_V_0_vld_in = ap_const_logic_1)))) then 
                    vlr_4_V_0_state <= ap_const_lv2_3;
                else 
                    vlr_4_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vsum_1_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_1_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vsum_1_V_0_ack_out = ap_const_logic_1) and (vsum_1_V_0_vld_out = ap_const_logic_1))) then 
                                        vsum_1_V_0_sel_rd <= not(vsum_1_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vsum_1_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_1_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vsum_1_V_0_ack_in = ap_const_logic_1) and (vsum_1_V_0_vld_in = ap_const_logic_1))) then 
                                        vsum_1_V_0_sel_wr <= not(vsum_1_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vsum_1_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_1_V_0_state <= ap_const_lv2_0;
            else
                if ((((vsum_1_V_0_state = ap_const_lv2_2) and (vsum_1_V_0_vld_in = ap_const_logic_0)) or ((vsum_1_V_0_state = ap_const_lv2_3) and (vsum_1_V_0_vld_in = ap_const_logic_0) and (vsum_1_V_0_ack_out = ap_const_logic_1)))) then 
                    vsum_1_V_0_state <= ap_const_lv2_2;
                elsif ((((vsum_1_V_0_state = ap_const_lv2_1) and (vsum_1_V_0_ack_out = ap_const_logic_0)) or ((vsum_1_V_0_state = ap_const_lv2_3) and (vsum_1_V_0_ack_out = ap_const_logic_0) and (vsum_1_V_0_vld_in = ap_const_logic_1)))) then 
                    vsum_1_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vsum_1_V_0_vld_in = ap_const_logic_0) and (vsum_1_V_0_ack_out = ap_const_logic_1))) and not(((vsum_1_V_0_ack_out = ap_const_logic_0) and (vsum_1_V_0_vld_in = ap_const_logic_1))) and (vsum_1_V_0_state = ap_const_lv2_3)) or ((vsum_1_V_0_state = ap_const_lv2_1) and (vsum_1_V_0_ack_out = ap_const_logic_1)) or ((vsum_1_V_0_state = ap_const_lv2_2) and (vsum_1_V_0_vld_in = ap_const_logic_1)))) then 
                    vsum_1_V_0_state <= ap_const_lv2_3;
                else 
                    vsum_1_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vsum_2_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_2_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vsum_2_V_0_ack_out = ap_const_logic_1) and (vsum_2_V_0_vld_out = ap_const_logic_1))) then 
                                        vsum_2_V_0_sel_rd <= not(vsum_2_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vsum_2_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_2_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vsum_2_V_0_ack_in = ap_const_logic_1) and (vsum_2_V_0_vld_in = ap_const_logic_1))) then 
                                        vsum_2_V_0_sel_wr <= not(vsum_2_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vsum_2_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_2_V_0_state <= ap_const_lv2_0;
            else
                if ((((vsum_2_V_0_state = ap_const_lv2_2) and (vsum_2_V_0_vld_in = ap_const_logic_0)) or ((vsum_2_V_0_state = ap_const_lv2_3) and (vsum_2_V_0_vld_in = ap_const_logic_0) and (vsum_2_V_0_ack_out = ap_const_logic_1)))) then 
                    vsum_2_V_0_state <= ap_const_lv2_2;
                elsif ((((vsum_2_V_0_state = ap_const_lv2_1) and (vsum_2_V_0_ack_out = ap_const_logic_0)) or ((vsum_2_V_0_state = ap_const_lv2_3) and (vsum_2_V_0_ack_out = ap_const_logic_0) and (vsum_2_V_0_vld_in = ap_const_logic_1)))) then 
                    vsum_2_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vsum_2_V_0_vld_in = ap_const_logic_0) and (vsum_2_V_0_ack_out = ap_const_logic_1))) and not(((vsum_2_V_0_ack_out = ap_const_logic_0) and (vsum_2_V_0_vld_in = ap_const_logic_1))) and (vsum_2_V_0_state = ap_const_lv2_3)) or ((vsum_2_V_0_state = ap_const_lv2_1) and (vsum_2_V_0_ack_out = ap_const_logic_1)) or ((vsum_2_V_0_state = ap_const_lv2_2) and (vsum_2_V_0_vld_in = ap_const_logic_1)))) then 
                    vsum_2_V_0_state <= ap_const_lv2_3;
                else 
                    vsum_2_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vsum_3_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_3_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vsum_3_V_0_ack_out = ap_const_logic_1) and (vsum_3_V_0_vld_out = ap_const_logic_1))) then 
                                        vsum_3_V_0_sel_rd <= not(vsum_3_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vsum_3_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_3_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vsum_3_V_0_ack_in = ap_const_logic_1) and (vsum_3_V_0_vld_in = ap_const_logic_1))) then 
                                        vsum_3_V_0_sel_wr <= not(vsum_3_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vsum_3_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_3_V_0_state <= ap_const_lv2_0;
            else
                if ((((vsum_3_V_0_state = ap_const_lv2_2) and (vsum_3_V_0_vld_in = ap_const_logic_0)) or ((vsum_3_V_0_state = ap_const_lv2_3) and (vsum_3_V_0_vld_in = ap_const_logic_0) and (vsum_3_V_0_ack_out = ap_const_logic_1)))) then 
                    vsum_3_V_0_state <= ap_const_lv2_2;
                elsif ((((vsum_3_V_0_state = ap_const_lv2_1) and (vsum_3_V_0_ack_out = ap_const_logic_0)) or ((vsum_3_V_0_state = ap_const_lv2_3) and (vsum_3_V_0_ack_out = ap_const_logic_0) and (vsum_3_V_0_vld_in = ap_const_logic_1)))) then 
                    vsum_3_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vsum_3_V_0_vld_in = ap_const_logic_0) and (vsum_3_V_0_ack_out = ap_const_logic_1))) and not(((vsum_3_V_0_ack_out = ap_const_logic_0) and (vsum_3_V_0_vld_in = ap_const_logic_1))) and (vsum_3_V_0_state = ap_const_lv2_3)) or ((vsum_3_V_0_state = ap_const_lv2_1) and (vsum_3_V_0_ack_out = ap_const_logic_1)) or ((vsum_3_V_0_state = ap_const_lv2_2) and (vsum_3_V_0_vld_in = ap_const_logic_1)))) then 
                    vsum_3_V_0_state <= ap_const_lv2_3;
                else 
                    vsum_3_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    vsum_4_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_4_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((vsum_4_V_0_ack_out = ap_const_logic_1) and (vsum_4_V_0_vld_out = ap_const_logic_1))) then 
                                        vsum_4_V_0_sel_rd <= not(vsum_4_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    vsum_4_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_4_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((vsum_4_V_0_ack_in = ap_const_logic_1) and (vsum_4_V_0_vld_in = ap_const_logic_1))) then 
                                        vsum_4_V_0_sel_wr <= not(vsum_4_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    vsum_4_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                vsum_4_V_0_state <= ap_const_lv2_0;
            else
                if ((((vsum_4_V_0_state = ap_const_lv2_2) and (vsum_4_V_0_vld_in = ap_const_logic_0)) or ((vsum_4_V_0_state = ap_const_lv2_3) and (vsum_4_V_0_vld_in = ap_const_logic_0) and (vsum_4_V_0_ack_out = ap_const_logic_1)))) then 
                    vsum_4_V_0_state <= ap_const_lv2_2;
                elsif ((((vsum_4_V_0_state = ap_const_lv2_1) and (vsum_4_V_0_ack_out = ap_const_logic_0)) or ((vsum_4_V_0_state = ap_const_lv2_3) and (vsum_4_V_0_ack_out = ap_const_logic_0) and (vsum_4_V_0_vld_in = ap_const_logic_1)))) then 
                    vsum_4_V_0_state <= ap_const_lv2_1;
                elsif (((not(((vsum_4_V_0_vld_in = ap_const_logic_0) and (vsum_4_V_0_ack_out = ap_const_logic_1))) and not(((vsum_4_V_0_ack_out = ap_const_logic_0) and (vsum_4_V_0_vld_in = ap_const_logic_1))) and (vsum_4_V_0_state = ap_const_lv2_3)) or ((vsum_4_V_0_state = ap_const_lv2_1) and (vsum_4_V_0_ack_out = ap_const_logic_1)) or ((vsum_4_V_0_state = ap_const_lv2_2) and (vsum_4_V_0_vld_in = ap_const_logic_1)))) then 
                    vsum_4_V_0_state <= ap_const_lv2_3;
                else 
                    vsum_4_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    comp_11_V_new_1_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_11_V_new_1_reg_352 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_11_V_new_1_reg_352 <= vsum_i_1_V_2_fu_561_p1;
            end if; 
        end if;
    end process;

    comp_12_V_new_1_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_12_V_new_1_reg_407 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_12_V_new_1_reg_407 <= vsum_i_2_V_2_fu_573_p1;
            end if; 
        end if;
    end process;

    comp_13_V_new_1_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_13_V_new_1_reg_462 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_13_V_new_1_reg_462 <= vsum_i_3_V_2_fu_585_p1;
            end if; 
        end if;
    end process;

    comp_14_V_new_1_reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_14_V_new_1_reg_517 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_14_V_new_1_reg_517 <= vsum_i_4_V_2_fu_597_p1;
            end if; 
        end if;
    end process;

    comp_21_V_new_1_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_21_V_new_1_reg_363 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_21_V_new_1_reg_363 <= vlr_test_1_V_fu_565_p1;
            end if; 
        end if;
    end process;

    comp_22_V_new_1_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_22_V_new_1_reg_418 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_22_V_new_1_reg_418 <= vlr_test_2_V_fu_577_p1;
            end if; 
        end if;
    end process;

    comp_23_V_new_1_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_23_V_new_1_reg_473 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_23_V_new_1_reg_473 <= vlr_test_3_V_fu_589_p1;
            end if; 
        end if;
    end process;

    comp_24_V_new_1_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_24_V_new_1_reg_528 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_24_V_new_1_reg_528 <= vlr_test_4_V_fu_601_p1;
            end if; 
        end if;
    end process;

    comp_31_V_new_1_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_31_V_new_1_reg_374 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_31_V_new_1_reg_374 <= vbt_test_1_V_fu_569_p1;
            end if; 
        end if;
    end process;

    comp_32_V_new_1_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_32_V_new_1_reg_429 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_32_V_new_1_reg_429 <= vbt_test_2_V_fu_581_p1;
            end if; 
        end if;
    end process;

    comp_33_V_new_1_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_33_V_new_1_reg_484 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_33_V_new_1_reg_484 <= vbt_test_3_V_fu_593_p1;
            end if; 
        end if;
    end process;

    comp_34_V_new_1_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_34_V_new_1_reg_539 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_34_V_new_1_reg_539 <= vbt_test_4_V_fu_605_p1;
            end if; 
        end if;
    end process;

    comp_vsum_1_V_flag_1_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_vsum_1_V_flag_1_reg_330 <= ap_const_lv1_1;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_vsum_1_V_flag_1_reg_330 <= tmp_4_fu_633_p2;
            end if; 
        end if;
    end process;

    comp_vsum_1_V_new_1_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_vsum_1_V_new_1_reg_341 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_vsum_1_V_new_1_reg_341 <= vsum_test_1_V_1_fu_621_p3;
            end if; 
        end if;
    end process;

    comp_vsum_2_V_flag_1_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_vsum_2_V_flag_1_reg_385 <= ap_const_lv1_1;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_vsum_2_V_flag_1_reg_385 <= tmp_9_fu_701_p2;
            end if; 
        end if;
    end process;

    comp_vsum_2_V_new_1_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_vsum_2_V_new_1_reg_396 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_vsum_2_V_new_1_reg_396 <= vsum_i_2_V_2_Val2_s_fu_689_p3;
            end if; 
        end if;
    end process;

    comp_vsum_3_V_flag_1_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_vsum_3_V_flag_1_reg_440 <= ap_const_lv1_1;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_vsum_3_V_flag_1_reg_440 <= tmp_1_fu_767_p2;
            end if; 
        end if;
    end process;

    comp_vsum_3_V_new_1_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_vsum_3_V_new_1_reg_451 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_vsum_3_V_new_1_reg_451 <= vsum_i_3_V_2_Val2_s_fu_755_p3;
            end if; 
        end if;
    end process;

    comp_vsum_4_V_flag_1_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_vsum_4_V_flag_1_reg_495 <= ap_const_lv1_1;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_vsum_4_V_flag_1_reg_495 <= tmp_3_fu_833_p2;
            end if; 
        end if;
    end process;

    comp_vsum_4_V_new_1_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                comp_vsum_4_V_new_1_reg_506 <= ap_const_lv26_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                comp_vsum_4_V_new_1_reg_506 <= vsum_i_4_V_2_Val2_s_fu_821_p3;
            end if; 
        end if;
    end process;

    contador_new_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                contador_new_reg_550 <= ap_const_lv32_0;
            elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                contador_new_reg_550 <= tmp_6_fu_879_p2;
            end if; 
        end if;
    end process;

    i_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_reg_319 <= i_1_reg_1176;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_319 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_comp_vsum_1_V_flag_1_phi_fu_334_p4 = ap_const_lv1_1) and (out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                comp_11_V <= comp_11_V_new_1_reg_352;
                comp_21_V <= comp_21_V_new_1_reg_363;
                comp_31_V <= comp_31_V_new_1_reg_374;
                comp_vsum_1_V <= comp_vsum_1_V_new_1_reg_341;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_comp_vsum_2_V_flag_1_phi_fu_389_p4 = ap_const_lv1_1) and (out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                comp_12_V <= comp_12_V_new_1_reg_407;
                comp_22_V <= comp_22_V_new_1_reg_418;
                comp_32_V <= comp_32_V_new_1_reg_429;
                comp_vsum_2_V <= comp_vsum_2_V_new_1_reg_396;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_comp_vsum_3_V_flag_1_phi_fu_444_p4 = ap_const_lv1_1) and (out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                comp_13_V <= comp_13_V_new_1_reg_462;
                comp_23_V <= comp_23_V_new_1_reg_473;
                comp_33_V <= comp_33_V_new_1_reg_484;
                comp_vsum_3_V <= comp_vsum_3_V_new_1_reg_451;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_comp_vsum_4_V_flag_1_phi_fu_499_p4 = ap_const_lv1_1) and (out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                comp_14_V <= comp_14_V_new_1_reg_517;
                comp_24_V <= comp_24_V_new_1_reg_528;
                comp_34_V <= comp_34_V_new_1_reg_539;
                comp_vsum_4_V <= comp_vsum_4_V_new_1_reg_506;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                contador <= contador_new_reg_550;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_1_reg_1176 <= i_1_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_peaks_V_1_load_A = ap_const_logic_1)) then
                out_peaks_V_1_payload_A <= tmp_10_fu_908_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_peaks_V_1_load_B = ap_const_logic_1)) then
                out_peaks_V_1_payload_B <= tmp_10_fu_908_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vbt_1_V_0_load_A = ap_const_logic_1)) then
                vbt_1_V_0_payload_A <= vbt_1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vbt_1_V_0_load_B = ap_const_logic_1)) then
                vbt_1_V_0_payload_B <= vbt_1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vbt_2_V_0_load_A = ap_const_logic_1)) then
                vbt_2_V_0_payload_A <= vbt_2_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vbt_2_V_0_load_B = ap_const_logic_1)) then
                vbt_2_V_0_payload_B <= vbt_2_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vbt_3_V_0_load_A = ap_const_logic_1)) then
                vbt_3_V_0_payload_A <= vbt_3_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vbt_3_V_0_load_B = ap_const_logic_1)) then
                vbt_3_V_0_payload_B <= vbt_3_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vbt_4_V_0_load_A = ap_const_logic_1)) then
                vbt_4_V_0_payload_A <= vbt_4_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vbt_4_V_0_load_B = ap_const_logic_1)) then
                vbt_4_V_0_payload_B <= vbt_4_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                vbt_test_1_V_comp_s_reg_1085 <= vbt_test_1_V_comp_s_fu_669_p3;
                vbt_test_2_V_comp_s_reg_1110 <= vbt_test_2_V_comp_s_fu_735_p3;
                vbt_test_3_V_comp_s_reg_1135 <= vbt_test_3_V_comp_s_fu_801_p3;
                vbt_test_4_V_comp_s_reg_1160 <= vbt_test_4_V_comp_s_fu_867_p3;
                vlr_test_2_V_comp_s_reg_1105 <= vlr_test_2_V_comp_s_fu_727_p3;
                vlr_test_3_V_comp_s_reg_1130 <= vlr_test_3_V_comp_s_fu_793_p3;
                vlr_test_4_V_comp_s_reg_1155 <= vlr_test_4_V_comp_s_fu_859_p3;
                vsum_i_2_V_1_comp_s_reg_1100 <= vsum_i_2_V_1_comp_s_fu_719_p3;
                vsum_i_3_V_1_comp_s_reg_1125 <= vsum_i_3_V_1_comp_s_fu_785_p3;
                vsum_i_4_V_1_comp_s_reg_1150 <= vsum_i_4_V_1_comp_s_fu_851_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vlr_1_V_0_load_A = ap_const_logic_1)) then
                vlr_1_V_0_payload_A <= vlr_1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vlr_1_V_0_load_B = ap_const_logic_1)) then
                vlr_1_V_0_payload_B <= vlr_1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vlr_2_V_0_load_A = ap_const_logic_1)) then
                vlr_2_V_0_payload_A <= vlr_2_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vlr_2_V_0_load_B = ap_const_logic_1)) then
                vlr_2_V_0_payload_B <= vlr_2_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vlr_3_V_0_load_A = ap_const_logic_1)) then
                vlr_3_V_0_payload_A <= vlr_3_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vlr_3_V_0_load_B = ap_const_logic_1)) then
                vlr_3_V_0_payload_B <= vlr_3_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vlr_4_V_0_load_A = ap_const_logic_1)) then
                vlr_4_V_0_payload_A <= vlr_4_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vlr_4_V_0_load_B = ap_const_logic_1)) then
                vlr_4_V_0_payload_B <= vlr_4_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vsum_1_V_0_load_A = ap_const_logic_1)) then
                vsum_1_V_0_payload_A <= vsum_1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vsum_1_V_0_load_B = ap_const_logic_1)) then
                vsum_1_V_0_payload_B <= vsum_1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vsum_2_V_0_load_A = ap_const_logic_1)) then
                vsum_2_V_0_payload_A <= vsum_2_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vsum_2_V_0_load_B = ap_const_logic_1)) then
                vsum_2_V_0_payload_B <= vsum_2_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vsum_3_V_0_load_A = ap_const_logic_1)) then
                vsum_3_V_0_payload_A <= vsum_3_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vsum_3_V_0_load_B = ap_const_logic_1)) then
                vsum_3_V_0_payload_B <= vsum_3_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vsum_4_V_0_load_A = ap_const_logic_1)) then
                vsum_4_V_0_payload_A <= vsum_4_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((vsum_4_V_0_load_B = ap_const_logic_1)) then
                vsum_4_V_0_payload_B <= vsum_4_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, out_peaks_V_1_ack_in, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state8, exitcond_fu_891_p2, tmp_7_fu_885_p2, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((exitcond_fu_891_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out)
    begin
                ap_block_state2 <= ((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(out_peaks_V_1_ack_in, ap_CS_fsm_state11)
    begin
        if (((out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_comp_vsum_1_V_flag_1_phi_fu_334_p4 <= comp_vsum_1_V_flag_1_reg_330;
    ap_phi_mux_comp_vsum_2_V_flag_1_phi_fu_389_p4 <= comp_vsum_2_V_flag_1_reg_385;
    ap_phi_mux_comp_vsum_3_V_flag_1_phi_fu_444_p4 <= comp_vsum_3_V_flag_1_reg_440;
    ap_phi_mux_comp_vsum_4_V_flag_1_phi_fu_499_p4 <= comp_vsum_4_V_flag_1_reg_495;

    ap_ready_assign_proc : process(out_peaks_V_1_ack_in, ap_CS_fsm_state11)
    begin
        if (((out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond_fu_891_p2 <= "1" when (i_reg_319 = ap_const_lv4_C) else "0";
    i_1_fu_897_p2 <= std_logic_vector(unsigned(i_reg_319) + unsigned(ap_const_lv4_1));
    out_peaks_V_1_ack_in <= out_peaks_V_1_state(1);
    out_peaks_V_1_ack_out <= out_peaks_V_TREADY;

    out_peaks_V_1_data_out_assign_proc : process(out_peaks_V_1_payload_A, out_peaks_V_1_payload_B, out_peaks_V_1_sel)
    begin
        if ((out_peaks_V_1_sel = ap_const_logic_1)) then 
            out_peaks_V_1_data_out <= out_peaks_V_1_payload_B;
        else 
            out_peaks_V_1_data_out <= out_peaks_V_1_payload_A;
        end if; 
    end process;

    out_peaks_V_1_load_A <= (out_peaks_V_1_state_cmp_full and not(out_peaks_V_1_sel_wr));
    out_peaks_V_1_load_B <= (out_peaks_V_1_state_cmp_full and out_peaks_V_1_sel_wr);
    out_peaks_V_1_sel <= out_peaks_V_1_sel_rd;
    out_peaks_V_1_state_cmp_full <= '0' when (out_peaks_V_1_state = ap_const_lv2_1) else '1';

    out_peaks_V_1_vld_in_assign_proc : process(out_peaks_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((out_peaks_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_peaks_V_1_vld_in <= ap_const_logic_1;
        else 
            out_peaks_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_peaks_V_1_vld_out <= out_peaks_V_1_state(0);
    out_peaks_V_TDATA <= out_peaks_V_1_data_out;

    out_peaks_V_TDATA_blk_n_assign_proc : process(out_peaks_V_1_state, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_peaks_V_TDATA_blk_n <= out_peaks_V_1_state(1);
        else 
            out_peaks_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_peaks_V_TVALID <= out_peaks_V_1_state(0);

    peaks_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_8_fu_903_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            peaks_V_address0 <= tmp_8_fu_903_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            peaks_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            peaks_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            peaks_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            peaks_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            peaks_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            peaks_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            peaks_V_address0 <= "XXXX";
        end if; 
    end process;


    peaks_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            peaks_V_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            peaks_V_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            peaks_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            peaks_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            peaks_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            peaks_V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            peaks_V_address1 <= "XXXX";
        end if; 
    end process;


    peaks_V_ce0_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            peaks_V_ce0 <= ap_const_logic_1;
        else 
            peaks_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    peaks_V_ce1_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            peaks_V_ce1 <= ap_const_logic_1;
        else 
            peaks_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    peaks_V_d0_assign_proc : process(ap_CS_fsm_state2, vbt_test_1_V_comp_s_reg_1085, vlr_test_2_V_comp_s_reg_1105, vsum_i_3_V_1_comp_s_reg_1125, vbt_test_3_V_comp_s_reg_1135, vlr_test_4_V_comp_s_reg_1155, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, vsum_i_1_V_1_comp_s_fu_651_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            peaks_V_d0 <= vlr_test_4_V_comp_s_reg_1155;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            peaks_V_d0 <= vbt_test_3_V_comp_s_reg_1135;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            peaks_V_d0 <= vsum_i_3_V_1_comp_s_reg_1125;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            peaks_V_d0 <= vlr_test_2_V_comp_s_reg_1105;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            peaks_V_d0 <= vbt_test_1_V_comp_s_reg_1085;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            peaks_V_d0 <= vsum_i_1_V_1_comp_s_fu_651_p3;
        else 
            peaks_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    peaks_V_d1_assign_proc : process(ap_CS_fsm_state2, vsum_i_2_V_1_comp_s_reg_1100, vbt_test_2_V_comp_s_reg_1110, vlr_test_3_V_comp_s_reg_1130, vsum_i_4_V_1_comp_s_reg_1150, vbt_test_4_V_comp_s_reg_1160, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, vlr_test_1_V_comp_s_fu_660_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            peaks_V_d1 <= vbt_test_4_V_comp_s_reg_1160;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            peaks_V_d1 <= vsum_i_4_V_1_comp_s_reg_1150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            peaks_V_d1 <= vlr_test_3_V_comp_s_reg_1130;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            peaks_V_d1 <= vbt_test_2_V_comp_s_reg_1110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            peaks_V_d1 <= vsum_i_2_V_1_comp_s_reg_1100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            peaks_V_d1 <= vlr_test_1_V_comp_s_fu_660_p3;
        else 
            peaks_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    peaks_V_we0_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state7, tmp_7_fu_885_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            peaks_V_we0 <= ap_const_logic_1;
        else 
            peaks_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    peaks_V_we1_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state7, tmp_7_fu_885_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_885_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            peaks_V_we1 <= ap_const_logic_1;
        else 
            peaks_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(peaks_V_q0),32));

    tmp_1_fu_767_p2 <= "1" when (signed(vsum_i_3_V_2_Val2_s_fu_755_p3) > signed(comp_vsum_3_V)) else "0";
    tmp_2_fu_809_p2 <= "1" when (signed(vsum_i_4_V_2_fu_597_p1) > signed(ap_const_lv26_0)) else "0";
    tmp_3_fu_833_p2 <= "1" when (signed(vsum_i_4_V_2_Val2_s_fu_821_p3) > signed(comp_vsum_4_V)) else "0";
    tmp_4_fu_633_p2 <= "1" when (signed(vsum_test_1_V_1_fu_621_p3) > signed(comp_vsum_1_V)) else "0";
    tmp_5_fu_677_p2 <= "1" when (signed(vsum_i_2_V_2_fu_573_p1) > signed(ap_const_lv26_0)) else "0";
    tmp_6_fu_879_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(contador));
    tmp_7_fu_885_p2 <= "1" when (tmp_6_fu_879_p2 = ap_const_lv32_61A8) else "0";
    tmp_8_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_319),64));
    tmp_9_fu_701_p2 <= "1" when (signed(vsum_i_2_V_2_Val2_s_fu_689_p3) > signed(comp_vsum_2_V)) else "0";
    tmp_fu_609_p2 <= "1" when (signed(vsum_i_1_V_2_fu_561_p1) > signed(ap_const_lv26_0)) else "0";
    tmp_s_fu_743_p2 <= "1" when (signed(vsum_i_3_V_2_fu_585_p1) > signed(ap_const_lv26_0)) else "0";
    vbt_1_V_0_ack_in <= vbt_1_V_0_state(1);

    vbt_1_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vbt_1_V_0_ack_out <= ap_const_logic_1;
        else 
            vbt_1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vbt_1_V_0_data_out_assign_proc : process(vbt_1_V_0_payload_A, vbt_1_V_0_payload_B, vbt_1_V_0_sel)
    begin
        if ((vbt_1_V_0_sel = ap_const_logic_1)) then 
            vbt_1_V_0_data_out <= vbt_1_V_0_payload_B;
        else 
            vbt_1_V_0_data_out <= vbt_1_V_0_payload_A;
        end if; 
    end process;

    vbt_1_V_0_load_A <= (vbt_1_V_0_state_cmp_full and not(vbt_1_V_0_sel_wr));
    vbt_1_V_0_load_B <= (vbt_1_V_0_state_cmp_full and vbt_1_V_0_sel_wr);
    vbt_1_V_0_sel <= vbt_1_V_0_sel_rd;
    vbt_1_V_0_state_cmp_full <= '0' when (vbt_1_V_0_state = ap_const_lv2_1) else '1';
    vbt_1_V_0_vld_in <= vbt_1_V_TVALID;
    vbt_1_V_0_vld_out <= vbt_1_V_0_state(0);

    vbt_1_V_TDATA_blk_n_assign_proc : process(vbt_1_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vbt_1_V_TDATA_blk_n <= vbt_1_V_0_state(0);
        else 
            vbt_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vbt_1_V_TREADY <= vbt_1_V_0_state(1);
    vbt_2_V_0_ack_in <= vbt_2_V_0_state(1);

    vbt_2_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vbt_2_V_0_ack_out <= ap_const_logic_1;
        else 
            vbt_2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vbt_2_V_0_data_out_assign_proc : process(vbt_2_V_0_payload_A, vbt_2_V_0_payload_B, vbt_2_V_0_sel)
    begin
        if ((vbt_2_V_0_sel = ap_const_logic_1)) then 
            vbt_2_V_0_data_out <= vbt_2_V_0_payload_B;
        else 
            vbt_2_V_0_data_out <= vbt_2_V_0_payload_A;
        end if; 
    end process;

    vbt_2_V_0_load_A <= (vbt_2_V_0_state_cmp_full and not(vbt_2_V_0_sel_wr));
    vbt_2_V_0_load_B <= (vbt_2_V_0_state_cmp_full and vbt_2_V_0_sel_wr);
    vbt_2_V_0_sel <= vbt_2_V_0_sel_rd;
    vbt_2_V_0_state_cmp_full <= '0' when (vbt_2_V_0_state = ap_const_lv2_1) else '1';
    vbt_2_V_0_vld_in <= vbt_2_V_TVALID;
    vbt_2_V_0_vld_out <= vbt_2_V_0_state(0);

    vbt_2_V_TDATA_blk_n_assign_proc : process(vbt_2_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vbt_2_V_TDATA_blk_n <= vbt_2_V_0_state(0);
        else 
            vbt_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vbt_2_V_TREADY <= vbt_2_V_0_state(1);
    vbt_3_V_0_ack_in <= vbt_3_V_0_state(1);

    vbt_3_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vbt_3_V_0_ack_out <= ap_const_logic_1;
        else 
            vbt_3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vbt_3_V_0_data_out_assign_proc : process(vbt_3_V_0_payload_A, vbt_3_V_0_payload_B, vbt_3_V_0_sel)
    begin
        if ((vbt_3_V_0_sel = ap_const_logic_1)) then 
            vbt_3_V_0_data_out <= vbt_3_V_0_payload_B;
        else 
            vbt_3_V_0_data_out <= vbt_3_V_0_payload_A;
        end if; 
    end process;

    vbt_3_V_0_load_A <= (vbt_3_V_0_state_cmp_full and not(vbt_3_V_0_sel_wr));
    vbt_3_V_0_load_B <= (vbt_3_V_0_state_cmp_full and vbt_3_V_0_sel_wr);
    vbt_3_V_0_sel <= vbt_3_V_0_sel_rd;
    vbt_3_V_0_state_cmp_full <= '0' when (vbt_3_V_0_state = ap_const_lv2_1) else '1';
    vbt_3_V_0_vld_in <= vbt_3_V_TVALID;
    vbt_3_V_0_vld_out <= vbt_3_V_0_state(0);

    vbt_3_V_TDATA_blk_n_assign_proc : process(vbt_3_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vbt_3_V_TDATA_blk_n <= vbt_3_V_0_state(0);
        else 
            vbt_3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vbt_3_V_TREADY <= vbt_3_V_0_state(1);
    vbt_4_V_0_ack_in <= vbt_4_V_0_state(1);

    vbt_4_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vbt_4_V_0_ack_out <= ap_const_logic_1;
        else 
            vbt_4_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vbt_4_V_0_data_out_assign_proc : process(vbt_4_V_0_payload_A, vbt_4_V_0_payload_B, vbt_4_V_0_sel)
    begin
        if ((vbt_4_V_0_sel = ap_const_logic_1)) then 
            vbt_4_V_0_data_out <= vbt_4_V_0_payload_B;
        else 
            vbt_4_V_0_data_out <= vbt_4_V_0_payload_A;
        end if; 
    end process;

    vbt_4_V_0_load_A <= (vbt_4_V_0_state_cmp_full and not(vbt_4_V_0_sel_wr));
    vbt_4_V_0_load_B <= (vbt_4_V_0_state_cmp_full and vbt_4_V_0_sel_wr);
    vbt_4_V_0_sel <= vbt_4_V_0_sel_rd;
    vbt_4_V_0_state_cmp_full <= '0' when (vbt_4_V_0_state = ap_const_lv2_1) else '1';
    vbt_4_V_0_vld_in <= vbt_4_V_TVALID;
    vbt_4_V_0_vld_out <= vbt_4_V_0_state(0);

    vbt_4_V_TDATA_blk_n_assign_proc : process(vbt_4_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vbt_4_V_TDATA_blk_n <= vbt_4_V_0_state(0);
        else 
            vbt_4_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vbt_4_V_TREADY <= vbt_4_V_0_state(1);
    vbt_test_1_V_comp_s_fu_669_p3 <= 
        vbt_test_1_V_fu_569_p1 when (tmp_4_fu_633_p2(0) = '1') else 
        comp_31_V;
    vbt_test_1_V_fu_569_p1 <= vbt_1_V_0_data_out(26 - 1 downto 0);
    vbt_test_2_V_comp_s_fu_735_p3 <= 
        vbt_test_2_V_fu_581_p1 when (tmp_9_fu_701_p2(0) = '1') else 
        comp_32_V;
    vbt_test_2_V_fu_581_p1 <= vbt_2_V_0_data_out(26 - 1 downto 0);
    vbt_test_3_V_comp_s_fu_801_p3 <= 
        vbt_test_3_V_fu_593_p1 when (tmp_1_fu_767_p2(0) = '1') else 
        comp_33_V;
    vbt_test_3_V_fu_593_p1 <= vbt_3_V_0_data_out(26 - 1 downto 0);
    vbt_test_4_V_comp_s_fu_867_p3 <= 
        vbt_test_4_V_fu_605_p1 when (tmp_3_fu_833_p2(0) = '1') else 
        comp_34_V;
    vbt_test_4_V_fu_605_p1 <= vbt_4_V_0_data_out(26 - 1 downto 0);
    vlr_1_V_0_ack_in <= vlr_1_V_0_state(1);

    vlr_1_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vlr_1_V_0_ack_out <= ap_const_logic_1;
        else 
            vlr_1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vlr_1_V_0_data_out_assign_proc : process(vlr_1_V_0_payload_A, vlr_1_V_0_payload_B, vlr_1_V_0_sel)
    begin
        if ((vlr_1_V_0_sel = ap_const_logic_1)) then 
            vlr_1_V_0_data_out <= vlr_1_V_0_payload_B;
        else 
            vlr_1_V_0_data_out <= vlr_1_V_0_payload_A;
        end if; 
    end process;

    vlr_1_V_0_load_A <= (vlr_1_V_0_state_cmp_full and not(vlr_1_V_0_sel_wr));
    vlr_1_V_0_load_B <= (vlr_1_V_0_state_cmp_full and vlr_1_V_0_sel_wr);
    vlr_1_V_0_sel <= vlr_1_V_0_sel_rd;
    vlr_1_V_0_state_cmp_full <= '0' when (vlr_1_V_0_state = ap_const_lv2_1) else '1';
    vlr_1_V_0_vld_in <= vlr_1_V_TVALID;
    vlr_1_V_0_vld_out <= vlr_1_V_0_state(0);

    vlr_1_V_TDATA_blk_n_assign_proc : process(vlr_1_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vlr_1_V_TDATA_blk_n <= vlr_1_V_0_state(0);
        else 
            vlr_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vlr_1_V_TREADY <= vlr_1_V_0_state(1);
    vlr_2_V_0_ack_in <= vlr_2_V_0_state(1);

    vlr_2_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vlr_2_V_0_ack_out <= ap_const_logic_1;
        else 
            vlr_2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vlr_2_V_0_data_out_assign_proc : process(vlr_2_V_0_payload_A, vlr_2_V_0_payload_B, vlr_2_V_0_sel)
    begin
        if ((vlr_2_V_0_sel = ap_const_logic_1)) then 
            vlr_2_V_0_data_out <= vlr_2_V_0_payload_B;
        else 
            vlr_2_V_0_data_out <= vlr_2_V_0_payload_A;
        end if; 
    end process;

    vlr_2_V_0_load_A <= (vlr_2_V_0_state_cmp_full and not(vlr_2_V_0_sel_wr));
    vlr_2_V_0_load_B <= (vlr_2_V_0_state_cmp_full and vlr_2_V_0_sel_wr);
    vlr_2_V_0_sel <= vlr_2_V_0_sel_rd;
    vlr_2_V_0_state_cmp_full <= '0' when (vlr_2_V_0_state = ap_const_lv2_1) else '1';
    vlr_2_V_0_vld_in <= vlr_2_V_TVALID;
    vlr_2_V_0_vld_out <= vlr_2_V_0_state(0);

    vlr_2_V_TDATA_blk_n_assign_proc : process(vlr_2_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vlr_2_V_TDATA_blk_n <= vlr_2_V_0_state(0);
        else 
            vlr_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vlr_2_V_TREADY <= vlr_2_V_0_state(1);
    vlr_3_V_0_ack_in <= vlr_3_V_0_state(1);

    vlr_3_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vlr_3_V_0_ack_out <= ap_const_logic_1;
        else 
            vlr_3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vlr_3_V_0_data_out_assign_proc : process(vlr_3_V_0_payload_A, vlr_3_V_0_payload_B, vlr_3_V_0_sel)
    begin
        if ((vlr_3_V_0_sel = ap_const_logic_1)) then 
            vlr_3_V_0_data_out <= vlr_3_V_0_payload_B;
        else 
            vlr_3_V_0_data_out <= vlr_3_V_0_payload_A;
        end if; 
    end process;

    vlr_3_V_0_load_A <= (vlr_3_V_0_state_cmp_full and not(vlr_3_V_0_sel_wr));
    vlr_3_V_0_load_B <= (vlr_3_V_0_state_cmp_full and vlr_3_V_0_sel_wr);
    vlr_3_V_0_sel <= vlr_3_V_0_sel_rd;
    vlr_3_V_0_state_cmp_full <= '0' when (vlr_3_V_0_state = ap_const_lv2_1) else '1';
    vlr_3_V_0_vld_in <= vlr_3_V_TVALID;
    vlr_3_V_0_vld_out <= vlr_3_V_0_state(0);

    vlr_3_V_TDATA_blk_n_assign_proc : process(vlr_3_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vlr_3_V_TDATA_blk_n <= vlr_3_V_0_state(0);
        else 
            vlr_3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vlr_3_V_TREADY <= vlr_3_V_0_state(1);
    vlr_4_V_0_ack_in <= vlr_4_V_0_state(1);

    vlr_4_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vlr_4_V_0_ack_out <= ap_const_logic_1;
        else 
            vlr_4_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vlr_4_V_0_data_out_assign_proc : process(vlr_4_V_0_payload_A, vlr_4_V_0_payload_B, vlr_4_V_0_sel)
    begin
        if ((vlr_4_V_0_sel = ap_const_logic_1)) then 
            vlr_4_V_0_data_out <= vlr_4_V_0_payload_B;
        else 
            vlr_4_V_0_data_out <= vlr_4_V_0_payload_A;
        end if; 
    end process;

    vlr_4_V_0_load_A <= (vlr_4_V_0_state_cmp_full and not(vlr_4_V_0_sel_wr));
    vlr_4_V_0_load_B <= (vlr_4_V_0_state_cmp_full and vlr_4_V_0_sel_wr);
    vlr_4_V_0_sel <= vlr_4_V_0_sel_rd;
    vlr_4_V_0_state_cmp_full <= '0' when (vlr_4_V_0_state = ap_const_lv2_1) else '1';
    vlr_4_V_0_vld_in <= vlr_4_V_TVALID;
    vlr_4_V_0_vld_out <= vlr_4_V_0_state(0);

    vlr_4_V_TDATA_blk_n_assign_proc : process(vlr_4_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vlr_4_V_TDATA_blk_n <= vlr_4_V_0_state(0);
        else 
            vlr_4_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vlr_4_V_TREADY <= vlr_4_V_0_state(1);
    vlr_test_1_V_comp_s_fu_660_p3 <= 
        vlr_test_1_V_fu_565_p1 when (tmp_4_fu_633_p2(0) = '1') else 
        comp_21_V;
    vlr_test_1_V_fu_565_p1 <= vlr_1_V_0_data_out(26 - 1 downto 0);
    vlr_test_2_V_comp_s_fu_727_p3 <= 
        vlr_test_2_V_fu_577_p1 when (tmp_9_fu_701_p2(0) = '1') else 
        comp_22_V;
    vlr_test_2_V_fu_577_p1 <= vlr_2_V_0_data_out(26 - 1 downto 0);
    vlr_test_3_V_comp_s_fu_793_p3 <= 
        vlr_test_3_V_fu_589_p1 when (tmp_1_fu_767_p2(0) = '1') else 
        comp_23_V;
    vlr_test_3_V_fu_589_p1 <= vlr_3_V_0_data_out(26 - 1 downto 0);
    vlr_test_4_V_comp_s_fu_859_p3 <= 
        vlr_test_4_V_fu_601_p1 when (tmp_3_fu_833_p2(0) = '1') else 
        comp_24_V;
    vlr_test_4_V_fu_601_p1 <= vlr_4_V_0_data_out(26 - 1 downto 0);
    vsum_1_V_0_ack_in <= vsum_1_V_0_state(1);

    vsum_1_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vsum_1_V_0_ack_out <= ap_const_logic_1;
        else 
            vsum_1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vsum_1_V_0_data_out_assign_proc : process(vsum_1_V_0_payload_A, vsum_1_V_0_payload_B, vsum_1_V_0_sel)
    begin
        if ((vsum_1_V_0_sel = ap_const_logic_1)) then 
            vsum_1_V_0_data_out <= vsum_1_V_0_payload_B;
        else 
            vsum_1_V_0_data_out <= vsum_1_V_0_payload_A;
        end if; 
    end process;

    vsum_1_V_0_load_A <= (vsum_1_V_0_state_cmp_full and not(vsum_1_V_0_sel_wr));
    vsum_1_V_0_load_B <= (vsum_1_V_0_state_cmp_full and vsum_1_V_0_sel_wr);
    vsum_1_V_0_sel <= vsum_1_V_0_sel_rd;
    vsum_1_V_0_state_cmp_full <= '0' when (vsum_1_V_0_state = ap_const_lv2_1) else '1';
    vsum_1_V_0_vld_in <= vsum_1_V_TVALID;
    vsum_1_V_0_vld_out <= vsum_1_V_0_state(0);

    vsum_1_V_TDATA_blk_n_assign_proc : process(vsum_1_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vsum_1_V_TDATA_blk_n <= vsum_1_V_0_state(0);
        else 
            vsum_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vsum_1_V_TREADY <= vsum_1_V_0_state(1);
    vsum_2_V_0_ack_in <= vsum_2_V_0_state(1);

    vsum_2_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vsum_2_V_0_ack_out <= ap_const_logic_1;
        else 
            vsum_2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vsum_2_V_0_data_out_assign_proc : process(vsum_2_V_0_payload_A, vsum_2_V_0_payload_B, vsum_2_V_0_sel)
    begin
        if ((vsum_2_V_0_sel = ap_const_logic_1)) then 
            vsum_2_V_0_data_out <= vsum_2_V_0_payload_B;
        else 
            vsum_2_V_0_data_out <= vsum_2_V_0_payload_A;
        end if; 
    end process;

    vsum_2_V_0_load_A <= (vsum_2_V_0_state_cmp_full and not(vsum_2_V_0_sel_wr));
    vsum_2_V_0_load_B <= (vsum_2_V_0_state_cmp_full and vsum_2_V_0_sel_wr);
    vsum_2_V_0_sel <= vsum_2_V_0_sel_rd;
    vsum_2_V_0_state_cmp_full <= '0' when (vsum_2_V_0_state = ap_const_lv2_1) else '1';
    vsum_2_V_0_vld_in <= vsum_2_V_TVALID;
    vsum_2_V_0_vld_out <= vsum_2_V_0_state(0);

    vsum_2_V_TDATA_blk_n_assign_proc : process(vsum_2_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vsum_2_V_TDATA_blk_n <= vsum_2_V_0_state(0);
        else 
            vsum_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vsum_2_V_TREADY <= vsum_2_V_0_state(1);
    vsum_3_V_0_ack_in <= vsum_3_V_0_state(1);

    vsum_3_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vsum_3_V_0_ack_out <= ap_const_logic_1;
        else 
            vsum_3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vsum_3_V_0_data_out_assign_proc : process(vsum_3_V_0_payload_A, vsum_3_V_0_payload_B, vsum_3_V_0_sel)
    begin
        if ((vsum_3_V_0_sel = ap_const_logic_1)) then 
            vsum_3_V_0_data_out <= vsum_3_V_0_payload_B;
        else 
            vsum_3_V_0_data_out <= vsum_3_V_0_payload_A;
        end if; 
    end process;

    vsum_3_V_0_load_A <= (vsum_3_V_0_state_cmp_full and not(vsum_3_V_0_sel_wr));
    vsum_3_V_0_load_B <= (vsum_3_V_0_state_cmp_full and vsum_3_V_0_sel_wr);
    vsum_3_V_0_sel <= vsum_3_V_0_sel_rd;
    vsum_3_V_0_state_cmp_full <= '0' when (vsum_3_V_0_state = ap_const_lv2_1) else '1';
    vsum_3_V_0_vld_in <= vsum_3_V_TVALID;
    vsum_3_V_0_vld_out <= vsum_3_V_0_state(0);

    vsum_3_V_TDATA_blk_n_assign_proc : process(vsum_3_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vsum_3_V_TDATA_blk_n <= vsum_3_V_0_state(0);
        else 
            vsum_3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vsum_3_V_TREADY <= vsum_3_V_0_state(1);
    vsum_4_V_0_ack_in <= vsum_4_V_0_state(1);

    vsum_4_V_0_ack_out_assign_proc : process(vsum_1_V_0_vld_out, vlr_1_V_0_vld_out, vbt_1_V_0_vld_out, vsum_2_V_0_vld_out, vlr_2_V_0_vld_out, vbt_2_V_0_vld_out, vsum_3_V_0_vld_out, vlr_3_V_0_vld_out, vbt_3_V_0_vld_out, vsum_4_V_0_vld_out, vlr_4_V_0_vld_out, vbt_4_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if ((not(((vbt_4_V_0_vld_out = ap_const_logic_0) or (vlr_4_V_0_vld_out = ap_const_logic_0) or (vsum_4_V_0_vld_out = ap_const_logic_0) or (vbt_3_V_0_vld_out = ap_const_logic_0) or (vlr_3_V_0_vld_out = ap_const_logic_0) or (vsum_3_V_0_vld_out = ap_const_logic_0) or (vsum_1_V_0_vld_out = ap_const_logic_0) or (vbt_2_V_0_vld_out = ap_const_logic_0) or (vlr_2_V_0_vld_out = ap_const_logic_0) or (vsum_2_V_0_vld_out = ap_const_logic_0) or (vbt_1_V_0_vld_out = ap_const_logic_0) or (vlr_1_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vsum_4_V_0_ack_out <= ap_const_logic_1;
        else 
            vsum_4_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    vsum_4_V_0_data_out_assign_proc : process(vsum_4_V_0_payload_A, vsum_4_V_0_payload_B, vsum_4_V_0_sel)
    begin
        if ((vsum_4_V_0_sel = ap_const_logic_1)) then 
            vsum_4_V_0_data_out <= vsum_4_V_0_payload_B;
        else 
            vsum_4_V_0_data_out <= vsum_4_V_0_payload_A;
        end if; 
    end process;

    vsum_4_V_0_load_A <= (vsum_4_V_0_state_cmp_full and not(vsum_4_V_0_sel_wr));
    vsum_4_V_0_load_B <= (vsum_4_V_0_state_cmp_full and vsum_4_V_0_sel_wr);
    vsum_4_V_0_sel <= vsum_4_V_0_sel_rd;
    vsum_4_V_0_state_cmp_full <= '0' when (vsum_4_V_0_state = ap_const_lv2_1) else '1';
    vsum_4_V_0_vld_in <= vsum_4_V_TVALID;
    vsum_4_V_0_vld_out <= vsum_4_V_0_state(0);

    vsum_4_V_TDATA_blk_n_assign_proc : process(vsum_4_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vsum_4_V_TDATA_blk_n <= vsum_4_V_0_state(0);
        else 
            vsum_4_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vsum_4_V_TREADY <= vsum_4_V_0_state(1);
    vsum_i_1_V_1_comp_s_fu_651_p3 <= 
        vsum_i_1_V_2_fu_561_p1 when (tmp_4_fu_633_p2(0) = '1') else 
        comp_11_V;
    vsum_i_1_V_2_fu_561_p1 <= vsum_1_V_0_data_out(26 - 1 downto 0);
    vsum_i_1_V_fu_615_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(vsum_i_1_V_2_fu_561_p1));
    vsum_i_2_V_1_comp_s_fu_719_p3 <= 
        vsum_i_2_V_2_fu_573_p1 when (tmp_9_fu_701_p2(0) = '1') else 
        comp_12_V;
    vsum_i_2_V_2_Val2_s_fu_689_p3 <= 
        vsum_i_2_V_2_fu_573_p1 when (tmp_5_fu_677_p2(0) = '1') else 
        vsum_i_2_V_fu_683_p2;
    vsum_i_2_V_2_fu_573_p1 <= vsum_2_V_0_data_out(26 - 1 downto 0);
    vsum_i_2_V_fu_683_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(vsum_i_2_V_2_fu_573_p1));
    vsum_i_3_V_1_comp_s_fu_785_p3 <= 
        vsum_i_3_V_2_fu_585_p1 when (tmp_1_fu_767_p2(0) = '1') else 
        comp_13_V;
    vsum_i_3_V_2_Val2_s_fu_755_p3 <= 
        vsum_i_3_V_2_fu_585_p1 when (tmp_s_fu_743_p2(0) = '1') else 
        vsum_i_3_V_fu_749_p2;
    vsum_i_3_V_2_fu_585_p1 <= vsum_3_V_0_data_out(26 - 1 downto 0);
    vsum_i_3_V_fu_749_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(vsum_i_3_V_2_fu_585_p1));
    vsum_i_4_V_1_comp_s_fu_851_p3 <= 
        vsum_i_4_V_2_fu_597_p1 when (tmp_3_fu_833_p2(0) = '1') else 
        comp_14_V;
    vsum_i_4_V_2_Val2_s_fu_821_p3 <= 
        vsum_i_4_V_2_fu_597_p1 when (tmp_2_fu_809_p2(0) = '1') else 
        vsum_i_4_V_fu_815_p2;
    vsum_i_4_V_2_fu_597_p1 <= vsum_4_V_0_data_out(26 - 1 downto 0);
    vsum_i_4_V_fu_815_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(vsum_i_4_V_2_fu_597_p1));
    vsum_test_1_V_1_fu_621_p3 <= 
        vsum_i_1_V_2_fu_561_p1 when (tmp_fu_609_p2(0) = '1') else 
        vsum_i_1_V_fu_615_p2;
end behav;
