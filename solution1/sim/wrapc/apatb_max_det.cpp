// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "vsum_1_V"
#define AUTOTB_TVIN_vsum_1_V  "../tv/cdatafile/c.max_det.autotvin_vsum_1_V.dat"
// wrapc file define: "vlr_1_V"
#define AUTOTB_TVIN_vlr_1_V  "../tv/cdatafile/c.max_det.autotvin_vlr_1_V.dat"
// wrapc file define: "vbt_1_V"
#define AUTOTB_TVIN_vbt_1_V  "../tv/cdatafile/c.max_det.autotvin_vbt_1_V.dat"
// wrapc file define: "out_peaks_V"
#define AUTOTB_TVOUT_out_peaks_V  "../tv/cdatafile/c.max_det.autotvout_out_peaks_V.dat"
#define AUTOTB_TVIN_out_peaks_V  "../tv/cdatafile/c.max_det.autotvin_out_peaks_V.dat"
// wrapc file define: "vsum_2_V"
#define AUTOTB_TVIN_vsum_2_V  "../tv/cdatafile/c.max_det.autotvin_vsum_2_V.dat"
// wrapc file define: "vlr_2_V"
#define AUTOTB_TVIN_vlr_2_V  "../tv/cdatafile/c.max_det.autotvin_vlr_2_V.dat"
// wrapc file define: "vbt_2_V"
#define AUTOTB_TVIN_vbt_2_V  "../tv/cdatafile/c.max_det.autotvin_vbt_2_V.dat"
// wrapc file define: "vsum_3_V"
#define AUTOTB_TVIN_vsum_3_V  "../tv/cdatafile/c.max_det.autotvin_vsum_3_V.dat"
// wrapc file define: "vlr_3_V"
#define AUTOTB_TVIN_vlr_3_V  "../tv/cdatafile/c.max_det.autotvin_vlr_3_V.dat"
// wrapc file define: "vbt_3_V"
#define AUTOTB_TVIN_vbt_3_V  "../tv/cdatafile/c.max_det.autotvin_vbt_3_V.dat"
// wrapc file define: "vsum_4_V"
#define AUTOTB_TVIN_vsum_4_V  "../tv/cdatafile/c.max_det.autotvin_vsum_4_V.dat"
// wrapc file define: "vlr_4_V"
#define AUTOTB_TVIN_vlr_4_V  "../tv/cdatafile/c.max_det.autotvin_vlr_4_V.dat"
// wrapc file define: "vbt_4_V"
#define AUTOTB_TVIN_vbt_4_V  "../tv/cdatafile/c.max_det.autotvin_vbt_4_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "out_peaks_V"
#define AUTOTB_TVOUT_PC_out_peaks_V  "../tv/rtldatafile/rtl.max_det.autotvout_out_peaks_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			vsum_1_V_depth = 0;
			vlr_1_V_depth = 0;
			vbt_1_V_depth = 0;
			out_peaks_V_depth = 0;
			vsum_2_V_depth = 0;
			vlr_2_V_depth = 0;
			vbt_2_V_depth = 0;
			vsum_3_V_depth = 0;
			vlr_3_V_depth = 0;
			vbt_3_V_depth = 0;
			vsum_4_V_depth = 0;
			vlr_4_V_depth = 0;
			vbt_4_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{vsum_1_V " << vsum_1_V_depth << "}\n";
			total_list << "{vlr_1_V " << vlr_1_V_depth << "}\n";
			total_list << "{vbt_1_V " << vbt_1_V_depth << "}\n";
			total_list << "{out_peaks_V " << out_peaks_V_depth << "}\n";
			total_list << "{vsum_2_V " << vsum_2_V_depth << "}\n";
			total_list << "{vlr_2_V " << vlr_2_V_depth << "}\n";
			total_list << "{vbt_2_V " << vbt_2_V_depth << "}\n";
			total_list << "{vsum_3_V " << vsum_3_V_depth << "}\n";
			total_list << "{vlr_3_V " << vlr_3_V_depth << "}\n";
			total_list << "{vbt_3_V " << vbt_3_V_depth << "}\n";
			total_list << "{vsum_4_V " << vsum_4_V_depth << "}\n";
			total_list << "{vlr_4_V " << vlr_4_V_depth << "}\n";
			total_list << "{vbt_4_V " << vbt_4_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int vsum_1_V_depth;
		int vlr_1_V_depth;
		int vbt_1_V_depth;
		int out_peaks_V_depth;
		int vsum_2_V_depth;
		int vlr_2_V_depth;
		int vbt_2_V_depth;
		int vsum_3_V_depth;
		int vlr_3_V_depth;
		int vbt_3_V_depth;
		int vsum_4_V_depth;
		int vlr_4_V_depth;
		int vbt_4_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void max_det (
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vsum_1,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vlr_1,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vbt_1,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* out_peaks,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vsum_2,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vlr_2,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vbt_2,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vsum_3,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vlr_3,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vbt_3,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vsum_4,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vlr_4,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vbt_4);

void AESL_WRAP_max_det (
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vsum_1,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vlr_1,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vbt_1,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* out_peaks,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vsum_2,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vlr_2,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vbt_2,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vsum_3,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vlr_3,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vbt_3,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vsum_4,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vlr_4,
ap_fixed<26, 26, (ap_q_mode) 2, (ap_o_mode)3, 0>* vbt_4)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "out_peaks_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_out_peaks_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out_peaks_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out_peaks_V, AESL_token); // data

			sc_bv<32> *out_peaks_V_pc_buffer = new sc_bv<32>[9];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_peaks_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out_peaks_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out_peaks_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out_peaks_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_peaks_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out_peaks_V
				{
					// bitslice(25, 0)
					// {
						// celement: out_peaks.V(25, 0)
						// {
							sc_lv<26>* out_peaks_V_lv0_0_8_1 = new sc_lv<26>[9];
						// }
					// }

					// bitslice(25, 0)
					{
						int hls_map_index = 0;
						// celement: out_peaks.V(25, 0)
						{
							// carray: (0) => (8) @ (1)
							for (int i_0 = 0; i_0 <= 8; i_0 += 1)
							{
								if (&(out_peaks[0]) != NULL) // check the null address if the c port is array or others
								{
									out_peaks_V_lv0_0_8_1[hls_map_index].range(25, 0) = sc_bv<26>(out_peaks_V_pc_buffer[hls_map_index].range(25, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(25, 0)
					{
						int hls_map_index = 0;
						// celement: out_peaks.V(25, 0)
						{
							// carray: (0) => (8) @ (1)
							for (int i_0 = 0; i_0 <= 8; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : out_peaks[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : out_peaks[0]
								// output_left_conversion : (out_peaks[i_0]).range()
								// output_type_conversion : (out_peaks_V_lv0_0_8_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(out_peaks[0]) != NULL) // check the null address if the c port is array or others
								{
									(out_peaks[i_0]).range() = (out_peaks_V_lv0_0_8_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] out_peaks_V_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "vsum_1_V"
		char* tvin_vsum_1_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vsum_1_V);

		// "vlr_1_V"
		char* tvin_vlr_1_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vlr_1_V);

		// "vbt_1_V"
		char* tvin_vbt_1_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vbt_1_V);

		// "out_peaks_V"
		char* tvin_out_peaks_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_peaks_V);
		char* tvout_out_peaks_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out_peaks_V);

		// "vsum_2_V"
		char* tvin_vsum_2_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vsum_2_V);

		// "vlr_2_V"
		char* tvin_vlr_2_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vlr_2_V);

		// "vbt_2_V"
		char* tvin_vbt_2_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vbt_2_V);

		// "vsum_3_V"
		char* tvin_vsum_3_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vsum_3_V);

		// "vlr_3_V"
		char* tvin_vlr_3_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vlr_3_V);

		// "vbt_3_V"
		char* tvin_vbt_3_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vbt_3_V);

		// "vsum_4_V"
		char* tvin_vsum_4_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vsum_4_V);

		// "vlr_4_V"
		char* tvin_vlr_4_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vlr_4_V);

		// "vbt_4_V"
		char* tvin_vbt_4_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vbt_4_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_vsum_1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vsum_1_V, tvin_vsum_1_V);

		sc_bv<32>* vsum_1_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vsum_1_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vsum_1.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vsum_1[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vsum_1[0]
						// regulate_c_name       : vsum_1_V
						// input_type_conversion : (vsum_1[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vsum_1[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vsum_1_V_tmp_mem;
							vsum_1_V_tmp_mem = (vsum_1[i_0]).range().to_string(SC_BIN).c_str();
							vsum_1_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vsum_1_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vsum_1_V, "%s\n", (vsum_1_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vsum_1_V, tvin_vsum_1_V);
		}

		tcl_file.set_num(1, &tcl_file.vsum_1_V_depth);
		sprintf(tvin_vsum_1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vsum_1_V, tvin_vsum_1_V);

		// release memory allocation
		delete [] vsum_1_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vlr_1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vlr_1_V, tvin_vlr_1_V);

		sc_bv<32>* vlr_1_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vlr_1_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vlr_1.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vlr_1[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vlr_1[0]
						// regulate_c_name       : vlr_1_V
						// input_type_conversion : (vlr_1[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vlr_1[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vlr_1_V_tmp_mem;
							vlr_1_V_tmp_mem = (vlr_1[i_0]).range().to_string(SC_BIN).c_str();
							vlr_1_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vlr_1_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vlr_1_V, "%s\n", (vlr_1_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vlr_1_V, tvin_vlr_1_V);
		}

		tcl_file.set_num(1, &tcl_file.vlr_1_V_depth);
		sprintf(tvin_vlr_1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vlr_1_V, tvin_vlr_1_V);

		// release memory allocation
		delete [] vlr_1_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vbt_1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vbt_1_V, tvin_vbt_1_V);

		sc_bv<32>* vbt_1_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vbt_1_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vbt_1.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vbt_1[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vbt_1[0]
						// regulate_c_name       : vbt_1_V
						// input_type_conversion : (vbt_1[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vbt_1[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vbt_1_V_tmp_mem;
							vbt_1_V_tmp_mem = (vbt_1[i_0]).range().to_string(SC_BIN).c_str();
							vbt_1_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vbt_1_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vbt_1_V, "%s\n", (vbt_1_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vbt_1_V, tvin_vbt_1_V);
		}

		tcl_file.set_num(1, &tcl_file.vbt_1_V_depth);
		sprintf(tvin_vbt_1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vbt_1_V, tvin_vbt_1_V);

		// release memory allocation
		delete [] vbt_1_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_out_peaks_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_out_peaks_V, tvin_out_peaks_V);

		sc_bv<32>* out_peaks_V_tvin_wrapc_buffer = new sc_bv<32>[9];

		// RTL Name: out_peaks_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: out_peaks.V(25, 0)
				{
					// carray: (0) => (8) @ (1)
					for (int i_0 = 0; i_0 <= 8; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out_peaks[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out_peaks[0]
						// regulate_c_name       : out_peaks_V
						// input_type_conversion : (out_peaks[i_0]).range().to_string(SC_BIN).c_str()
						if (&(out_peaks[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> out_peaks_V_tmp_mem;
							out_peaks_V_tmp_mem = (out_peaks[i_0]).range().to_string(SC_BIN).c_str();
							out_peaks_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = out_peaks_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 9; i++)
		{
			sprintf(tvin_out_peaks_V, "%s\n", (out_peaks_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_out_peaks_V, tvin_out_peaks_V);
		}

		tcl_file.set_num(9, &tcl_file.out_peaks_V_depth);
		sprintf(tvin_out_peaks_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_out_peaks_V, tvin_out_peaks_V);

		// release memory allocation
		delete [] out_peaks_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vsum_2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vsum_2_V, tvin_vsum_2_V);

		sc_bv<32>* vsum_2_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vsum_2_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vsum_2.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vsum_2[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vsum_2[0]
						// regulate_c_name       : vsum_2_V
						// input_type_conversion : (vsum_2[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vsum_2[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vsum_2_V_tmp_mem;
							vsum_2_V_tmp_mem = (vsum_2[i_0]).range().to_string(SC_BIN).c_str();
							vsum_2_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vsum_2_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vsum_2_V, "%s\n", (vsum_2_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vsum_2_V, tvin_vsum_2_V);
		}

		tcl_file.set_num(1, &tcl_file.vsum_2_V_depth);
		sprintf(tvin_vsum_2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vsum_2_V, tvin_vsum_2_V);

		// release memory allocation
		delete [] vsum_2_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vlr_2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vlr_2_V, tvin_vlr_2_V);

		sc_bv<32>* vlr_2_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vlr_2_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vlr_2.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vlr_2[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vlr_2[0]
						// regulate_c_name       : vlr_2_V
						// input_type_conversion : (vlr_2[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vlr_2[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vlr_2_V_tmp_mem;
							vlr_2_V_tmp_mem = (vlr_2[i_0]).range().to_string(SC_BIN).c_str();
							vlr_2_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vlr_2_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vlr_2_V, "%s\n", (vlr_2_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vlr_2_V, tvin_vlr_2_V);
		}

		tcl_file.set_num(1, &tcl_file.vlr_2_V_depth);
		sprintf(tvin_vlr_2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vlr_2_V, tvin_vlr_2_V);

		// release memory allocation
		delete [] vlr_2_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vbt_2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vbt_2_V, tvin_vbt_2_V);

		sc_bv<32>* vbt_2_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vbt_2_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vbt_2.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vbt_2[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vbt_2[0]
						// regulate_c_name       : vbt_2_V
						// input_type_conversion : (vbt_2[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vbt_2[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vbt_2_V_tmp_mem;
							vbt_2_V_tmp_mem = (vbt_2[i_0]).range().to_string(SC_BIN).c_str();
							vbt_2_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vbt_2_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vbt_2_V, "%s\n", (vbt_2_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vbt_2_V, tvin_vbt_2_V);
		}

		tcl_file.set_num(1, &tcl_file.vbt_2_V_depth);
		sprintf(tvin_vbt_2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vbt_2_V, tvin_vbt_2_V);

		// release memory allocation
		delete [] vbt_2_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vsum_3_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vsum_3_V, tvin_vsum_3_V);

		sc_bv<32>* vsum_3_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vsum_3_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vsum_3.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vsum_3[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vsum_3[0]
						// regulate_c_name       : vsum_3_V
						// input_type_conversion : (vsum_3[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vsum_3[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vsum_3_V_tmp_mem;
							vsum_3_V_tmp_mem = (vsum_3[i_0]).range().to_string(SC_BIN).c_str();
							vsum_3_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vsum_3_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vsum_3_V, "%s\n", (vsum_3_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vsum_3_V, tvin_vsum_3_V);
		}

		tcl_file.set_num(1, &tcl_file.vsum_3_V_depth);
		sprintf(tvin_vsum_3_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vsum_3_V, tvin_vsum_3_V);

		// release memory allocation
		delete [] vsum_3_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vlr_3_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vlr_3_V, tvin_vlr_3_V);

		sc_bv<32>* vlr_3_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vlr_3_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vlr_3.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vlr_3[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vlr_3[0]
						// regulate_c_name       : vlr_3_V
						// input_type_conversion : (vlr_3[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vlr_3[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vlr_3_V_tmp_mem;
							vlr_3_V_tmp_mem = (vlr_3[i_0]).range().to_string(SC_BIN).c_str();
							vlr_3_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vlr_3_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vlr_3_V, "%s\n", (vlr_3_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vlr_3_V, tvin_vlr_3_V);
		}

		tcl_file.set_num(1, &tcl_file.vlr_3_V_depth);
		sprintf(tvin_vlr_3_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vlr_3_V, tvin_vlr_3_V);

		// release memory allocation
		delete [] vlr_3_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vbt_3_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vbt_3_V, tvin_vbt_3_V);

		sc_bv<32>* vbt_3_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vbt_3_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vbt_3.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vbt_3[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vbt_3[0]
						// regulate_c_name       : vbt_3_V
						// input_type_conversion : (vbt_3[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vbt_3[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vbt_3_V_tmp_mem;
							vbt_3_V_tmp_mem = (vbt_3[i_0]).range().to_string(SC_BIN).c_str();
							vbt_3_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vbt_3_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vbt_3_V, "%s\n", (vbt_3_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vbt_3_V, tvin_vbt_3_V);
		}

		tcl_file.set_num(1, &tcl_file.vbt_3_V_depth);
		sprintf(tvin_vbt_3_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vbt_3_V, tvin_vbt_3_V);

		// release memory allocation
		delete [] vbt_3_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vsum_4_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vsum_4_V, tvin_vsum_4_V);

		sc_bv<32>* vsum_4_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vsum_4_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vsum_4.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vsum_4[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vsum_4[0]
						// regulate_c_name       : vsum_4_V
						// input_type_conversion : (vsum_4[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vsum_4[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vsum_4_V_tmp_mem;
							vsum_4_V_tmp_mem = (vsum_4[i_0]).range().to_string(SC_BIN).c_str();
							vsum_4_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vsum_4_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vsum_4_V, "%s\n", (vsum_4_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vsum_4_V, tvin_vsum_4_V);
		}

		tcl_file.set_num(1, &tcl_file.vsum_4_V_depth);
		sprintf(tvin_vsum_4_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vsum_4_V, tvin_vsum_4_V);

		// release memory allocation
		delete [] vsum_4_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vlr_4_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vlr_4_V, tvin_vlr_4_V);

		sc_bv<32>* vlr_4_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vlr_4_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vlr_4.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vlr_4[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vlr_4[0]
						// regulate_c_name       : vlr_4_V
						// input_type_conversion : (vlr_4[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vlr_4[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vlr_4_V_tmp_mem;
							vlr_4_V_tmp_mem = (vlr_4[i_0]).range().to_string(SC_BIN).c_str();
							vlr_4_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vlr_4_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vlr_4_V, "%s\n", (vlr_4_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vlr_4_V, tvin_vlr_4_V);
		}

		tcl_file.set_num(1, &tcl_file.vlr_4_V_depth);
		sprintf(tvin_vlr_4_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vlr_4_V, tvin_vlr_4_V);

		// release memory allocation
		delete [] vlr_4_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_vbt_4_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vbt_4_V, tvin_vbt_4_V);

		sc_bv<32>* vbt_4_V_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: vbt_4_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: vbt_4.V(25, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : vbt_4[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : vbt_4[0]
						// regulate_c_name       : vbt_4_V
						// input_type_conversion : (vbt_4[i_0]).range().to_string(SC_BIN).c_str()
						if (&(vbt_4[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> vbt_4_V_tmp_mem;
							vbt_4_V_tmp_mem = (vbt_4[i_0]).range().to_string(SC_BIN).c_str();
							vbt_4_V_tvin_wrapc_buffer[hls_map_index].range(25, 0) = vbt_4_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vbt_4_V, "%s\n", (vbt_4_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vbt_4_V, tvin_vbt_4_V);
		}

		tcl_file.set_num(1, &tcl_file.vbt_4_V_depth);
		sprintf(tvin_vbt_4_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vbt_4_V, tvin_vbt_4_V);

		// release memory allocation
		delete [] vbt_4_V_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		max_det(vsum_1, vlr_1, vbt_1, out_peaks, vsum_2, vlr_2, vbt_2, vsum_3, vlr_3, vbt_3, vsum_4, vlr_4, vbt_4);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_out_peaks_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out_peaks_V, tvout_out_peaks_V);

		sc_bv<32>* out_peaks_V_tvout_wrapc_buffer = new sc_bv<32>[9];

		// RTL Name: out_peaks_V
		{
			// bitslice(25, 0)
			{
				int hls_map_index = 0;
				// celement: out_peaks.V(25, 0)
				{
					// carray: (0) => (8) @ (1)
					for (int i_0 = 0; i_0 <= 8; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out_peaks[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out_peaks[0]
						// regulate_c_name       : out_peaks_V
						// input_type_conversion : (out_peaks[i_0]).range().to_string(SC_BIN).c_str()
						if (&(out_peaks[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<26> out_peaks_V_tmp_mem;
							out_peaks_V_tmp_mem = (out_peaks[i_0]).range().to_string(SC_BIN).c_str();
							out_peaks_V_tvout_wrapc_buffer[hls_map_index].range(25, 0) = out_peaks_V_tmp_mem.range(25, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 9; i++)
		{
			sprintf(tvout_out_peaks_V, "%s\n", (out_peaks_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out_peaks_V, tvout_out_peaks_V);
		}

		tcl_file.set_num(9, &tcl_file.out_peaks_V_depth);
		sprintf(tvout_out_peaks_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out_peaks_V, tvout_out_peaks_V);

		// release memory allocation
		delete [] out_peaks_V_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "vsum_1_V"
		delete [] tvin_vsum_1_V;
		// release memory allocation: "vlr_1_V"
		delete [] tvin_vlr_1_V;
		// release memory allocation: "vbt_1_V"
		delete [] tvin_vbt_1_V;
		// release memory allocation: "out_peaks_V"
		delete [] tvout_out_peaks_V;
		delete [] tvin_out_peaks_V;
		// release memory allocation: "vsum_2_V"
		delete [] tvin_vsum_2_V;
		// release memory allocation: "vlr_2_V"
		delete [] tvin_vlr_2_V;
		// release memory allocation: "vbt_2_V"
		delete [] tvin_vbt_2_V;
		// release memory allocation: "vsum_3_V"
		delete [] tvin_vsum_3_V;
		// release memory allocation: "vlr_3_V"
		delete [] tvin_vlr_3_V;
		// release memory allocation: "vbt_3_V"
		delete [] tvin_vbt_3_V;
		// release memory allocation: "vsum_4_V"
		delete [] tvin_vsum_4_V;
		// release memory allocation: "vlr_4_V"
		delete [] tvin_vlr_4_V;
		// release memory allocation: "vbt_4_V"
		delete [] tvin_vbt_4_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

